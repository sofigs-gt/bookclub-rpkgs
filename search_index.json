[["index.html", "R Packages Book Club Welcome", " R Packages Book Club The R4DS Online Learning Community 2022-10-20 Welcome Welcome to the bookclub! This is a companion for the book R Packages by Hadley Wickham and Jenny Bryan (work-in-progress 2nd edition, copyright 2022). This companion is available at r4ds.io/rpkgs. This website is being developed by the R4DS Online Learning Community. Follow along, and join the community to participate. This companion follows the R4DS Online Learning Community Code of Conduct. "],["book-club-meetings.html", "Book club meetings", " Book club meetings Each week, a volunteer will present a chapter from the book (or part of a chapter). This is the best way to learn the material. Presentations will usually consist of a review of the material, a discussion, and/or a demonstration of the principles presented in that chapter. More information about how to present is available in the github repo. Presentations will be recorded, and will be available on the R4DS Online Learning Community YouTube Channel. Camera is optional, but encouraged. If we need to slow down and discuss, let me know Most likely someone has the same question We are all here to learn "],["pace.html", "Pace", " Pace We’ll try to cover 1 chapter/week, but… …It’s ok to split chapters when they feel like too much. We will try to meet every week, but will likely take some breaks for holidays, etc. The sessions will be exactly one hour. I encourage the group to adopt a ‘go no matter what’ mentality. "],["introductions.html", "Introductions", " Introductions If you feel comfortable sharing: Who are you? Where are you calling in from? How long have you been using R? What are you most looking forward to during the group? "],["git-and-github.html", "git and GitHub", " git and GitHub It’s worth taking the time to learn git and version control. It’s a topic discussed more in-depth later in the book. If you lead the discussion, it’s best to integrate your materials into this bookdown version of the materials. You’ll need a GitHub account to submit any modifications. If you’re comfortable with git and GitHub Fork the repo to your account. Create a branch to make your changes. Submit a pull request via the R4DS repo for the book PR’s will are reviewed before being pushed and knitted "],["questions-for-the-group.html", "Questions for the group", " Questions for the group Question 1 Question 1 for the group (submit answers to the chat) On a scale from 1 - 5, how familiar are you with using git for version control? 1 = Not at all familiar (a true beginner) to 5 = Very familiar (use git everyday/can handle a merge conflict like a pro) Question 2 for the group On a scale from 1 - 5, how familiar are you with using GitHub? 1 = Not at all familiar (a true beginner) to 5 = Very familiar (I have GitHub account with repositories) Optional Question 3 (depending on feedback) On a scale from 1 - 5, how valuable would it be to devote a week to introducing git and GitHub? 1 = Not at all valuable to 5 = Very valuable "],["resources-to-learn-more-about-git-and-github.html", "Resources to learn more about git and GitHub", " Resources to learn more about git and GitHub Happy Git and GitHub for the useR usethis’s pull request helpers git’s documentation MShiny Cohort 2 Introduction Git for Book Clubs YouTube playlist "],["introduction.html", "Chapter 1 Introduction", " Chapter 1 Introduction Learning objectives: Explain the book club format. Explain what an R package is. Describe why we should develop packages. Discuss the philosophy behind the use of the devtools and usethis packages in package development. "],["what-is-an-r-package.html", "1.1 What is an R package?", " 1.1 What is an R package? R packages can be defined based on their utility: A means to bundle code, data, documentation, and tests that can easily be shared with others. A package opens up the use of several workflow packages/tools. R packages can be defined by their structure: Discussed throughout the book club At its core, packages are defined by the conventions of how files and directories are organized: /R; DESCRIPTION file; /tests; /data; etc. Packaging Data Analytical Work Reproducibly Using R (and Friends) "],["installing-and-using-packages.html", "1.2 Installing and using packages", " 1.2 Installing and using packages Packages are available via Comprehensive R Archive Network (CRAN) Packages are also available via different public repos GitHub is the most popular. 1.2.1 Installing packages install.packages(&quot;x&quot;) library(&quot;x&quot;) # Getting help package?x help(package = &quot;x&quot;) "],["why-develop-packages.html", "1.3 Why develop packages?", " 1.3 Why develop packages? Allows us to more easily share and use code amongst the team and other collaborators. Saves yourself and your team’s time. Opens up the use of several tools to more efficiently write code. Defines a formal organizational structure of where to put things. Allows us to develop more robust, rigorous, reproducible analyses. Helps us write better code. "],["philosophy-behind-the-tools-of-r-package-development.html", "1.4 Philosophy behind the tools of R Package development", " 1.4 Philosophy behind the tools of R Package development Anything that can be automated, should be automated. Use functions for package development, avoid doing it by hand. To do this, we need to learn the functions/workflow. Our thinking should be on what we want the package to do, not on how to organize a package. This is where the devtools and usethis package come into play. Tools to insulate us from the low-level details of how packages are built. devtools works nicely with RStudio, so that’s the development environment we will use. install.packages(c(&quot;devtools&quot;, &quot;usethis&quot;)) "],["what-if-we-need-more-detail.html", "1.5 What if we need more detail?", " 1.5 What if we need more detail? The official manual is Writing R Extensions. This document is exhaustive. "],["what-we-wont-learn.html", "1.6 What we won’t learn", " 1.6 What we won’t learn Important topics not covered in the book Git and Github Compiled code Markdown and Rmarkdown "],["a-note.html", "1.7 A note", " 1.7 A note Don’t get overwhelmed Some stuff you may never use. Remember, an R package at it’s core is just an R directory. You are not expected to know everything. We are all learning. None of us is as smart as all of us. It’s okay to say “I don’t know.” We can stop at anytime to discuss. "],["meeting-videos.html", "1.8 Meeting Videos", " 1.8 Meeting Videos 1.8.1 Cohort 1 1.8.2 Cohort 2 1.8.3 Cohort 3 Meeting chat log 00:07:46 Rex: Brisbane, Australia 00:36:26 Collin Berke: On a scale from 1 - 5, how familiar are you with using git for version control? 00:36:51 Ryan Metcalf: 4 00:36:52 Brendan Lam: 2 00:36:52 Arun Chavan: 3 00:36:53 Larissa Shaughnessy: 2 00:36:54 Isabella Velásquez: 4 00:36:57 Rex Parsons: 3 00:37:19 Collin Berke: On a scale from 1 - 5, how familiar are you with using GitHub? 00:37:38 Rex Parsons: 4 00:37:38 Arun Chavan: 4 00:37:38 Isabella Velásquez: 5 00:37:39 Brendan Lam: 2 00:37:41 Larissa Shaughnessy: 3 00:38:14 Collin Berke: On a scale from 1 - 5, how valuable would it be to devote a week to introducing git and GitHub? 00:38:29 Brendan Lam: 3 00:38:31 Arun Chavan: 2 00:38:35 Larissa Shaughnessy: 4 00:38:35 Ryan Metcalf: 4 00:38:36 Rex Parsons: 4 00:38:48 Isabella Velásquez: I am comfortable with Git, but if it’s valuable for the group! 01:05:36 Rex Parsons: Thanks, Collin! 1.8.4 Cohort 4 "],["the-whole-game.html", "Chapter 2 The whole game", " Chapter 2 The whole game Learning objectives: Become acquainted with the entire workflow for developing a package. Observe the use of some common functions used in the package development workflow. Understand the process to develop, document, and test a function. Describe the process to install and experiment with a package’s functions. Discuss the roles git and GitHub play in the development of a package. "],["warmupice-breaker.html", "2.1 Warmup/Ice breaker", " 2.1 Warmup/Ice breaker Do you say data (“day - ta”), data (“dah - ta”), or something else? "],["a-few-reminders.html", "2.2 A few reminders", " 2.2 A few reminders If we need to slow down and discuss, let me know. If you have a question, most likely someone else will have the same question. We are all here to learn. Camera is optional, but encouraged. Sessions are recorded and uploaded YouTube. See the pins in the Slack channel for the schedule and sign-ups. "],["load-devtools-and-friends.html", "2.3 Load devtools and friends", " 2.3 Load devtools and friends library(devtools) ## Loading required package: usethis # Check package version packageVersion(&quot;devtools&quot;) ## [1] &#39;2.4.5&#39; Latest version as of the writing of these notes is 2.4.3. "],["what-types-of-functionstools-are-used-during-package-development.html", "2.4 What types of functions/tools are used during package development?", " 2.4 What types of functions/tools are used during package development? Functions fulfilling a specific need. Functions used to facilitate the use of version control (i.e., git and GitHub). Functions to assist in the package development workflow. Setting up the function file Developing documentation (e.g. roxygen2) Testing our code (e.g. testthat) Using a README.Rmd file for documentation. "],["create-the-package.html", "2.5 Create the package", " 2.5 Create the package Use usethis::create_package(\"~path/to/package) Before you run: Consider where these files will be placed Files created (options to view ‘dotfiles’) .Rbuildignore: Files ignored when the package is built from source. .Rproj.user: A directory used by RStudio .gitignore: A file to ignore files for version control. DESCRIPTION: Provides metadata about your package. NAMESPACE: Declares functions to export and external functions to import from other packages. R: The business end of your package. Will hold all of the .R files. projectName.Rproj: File that makes this directory a project. "],["example-package.html", "2.6 Example package", " 2.6 Example package The example package being discussed can be found here. The development can be viewed via the commit history. "],["git-github-a-brief-brief-intro.html", "2.7 git &amp; GitHub, a brief, brief intro", " 2.7 git &amp; GitHub, a brief, brief intro Moving (mirroring) and tracking changes to files (track changes) Topic is certainly more complex Difference between git and GitHub/Bitbucket/GitLab Set up authentication Managing Git(Hub) credentials vignette Happy Git and GitHub for the useR Once you’re set up, you’re good to go. Choose a git client Many, many options (just choose one) Built in Git tab in R Studio GitHub Desktop app usethis helper functions gert package 2.7.1 Fork triangle Diagram taken from Happy Git and GitHub for the useR 2.7.2 Basic workflow 2.7.3 Simplify this workflow Use usethis::create_from_github(\"https://github.com/jennybc/regexcite.git\", fork = TRUE, open = TRUE) Explore the use of the gert package. A simple git client Uses simple R data types (e.g., tibbles) usethis pull request helpers. I ran out of time to review and get comfortable using these functions. Read this vignette here. "],["creating-a-function.html", "2.8 Creating a function", " 2.8 Creating a function use_r() creates a file below the R/ subdirectory. Each new function–when starting out–should get its own file. More complex packages = more functions per file. No other top level code should be in the file. No library() in the function files. Different mechanisms are used to declare dependencies. Scripts &gt;&gt;&gt; packages The book doesn’t cover how to write functions: Functions chapter R4DS Functions chapter in Advanced R Any other resources? Not a novel function. Used for demonstration purposes. #&#39; Create a file name with a date time prefix #&#39; #&#39; @param file_name string A string element representing a file name #&#39; #&#39; @return string value #&#39; #&#39; @export #&#39; #&#39; @examples #&#39; #&#39; create_date_file_name(&quot;data_file.csv&quot;) #&#39; create_date_file_name &lt;- function(file_name){ paste0(gsub(&quot;[-: ]&quot;, &quot;_&quot;, Sys.time()), &quot;_&quot;, file_name) } "],["taking-functions-for-a-test-drive.html", "2.9 Taking functions for a test drive", " 2.9 Taking functions for a test drive load_all() - quickly makes functions available for experimentation. Simulates the process of building, installing, and attaching the package. Technically, function is not in the global environment. Test using exists(\"function-name\", where = globalenv(), inherits = FALSE) This is a much, much faster workflow. It’s good practice to commit once you finish a function. Commits are cheap. "],["checking-package-with-check.html", "2.10 Checking package with check()", " 2.10 Checking package with check() Runs the R CMD check This is the gold standard to get feedback regarding your code. To run this, we use the check() function. Read the output, it tells you what needs to be fixed. Deal with problems early and often. Fix it now, not later. Don’t let work pile up. Harder to fix when problems accumulate. "],["store-package-metadata-in-the-description-file.html", "2.11 Store package metadata in the DESCRIPTION file", " 2.11 Store package metadata in the DESCRIPTION file Package: regexcite Title: Make Regular Expressions More Exciting Version: 0.0.0.9000 Authors@R: person(&quot;Jane&quot;, &quot;Doe&quot;, , &quot;jane@example.com&quot;, role = c(&quot;aut&quot;, &quot;cre&quot;)) Description: Convenience functions to make some common tasks with string manipulation and regular expressions a bit easier. License: `use_mit_license()`, `use_gpl3_license()` or friends to pick a license Encoding: UTF-8 Roxygen: list(markdown = TRUE) RoxygenNote: 7.1.2 "],["pick-a-license-any-license.html", "2.12 Pick a license, any license", " 2.12 Pick a license, any license For personal packages, licensing is not too much of a concern (not a lawyer, though). If you develop a public facing package, then licensing becomes more important. Use a usethis::use_*_license to get up and running quickly with a license. This configures the LISCENSE field in DESCRIPTION "],["documenting-functions.html", "2.13 Documenting functions", " 2.13 Documenting functions Functions are documented using LaTeX. All documentation gets stored in the man/ directory. We don’t have to manually set up documentation. A package called roxygen2 which manages the man/ directory. A roxygen2 skeleton always has #' at the start of each line. When done documenting, run document() to build the man/ files. This is draft documentation. Links will not work. #&#39; Split a string #&#39; #&#39; @param x A character vector with one element. #&#39; @param split What to split on. #&#39; #&#39; @return A character vector. #&#39; @export #&#39; #&#39; @examples #&#39; x &lt;- &quot;alfa,bravo,charlie,delta&quot; #&#39; strsplit(x, split = &quot;,&quot;) "],["the-namespace-file.html", "2.14 The NAMESPACE file", " 2.14 The NAMESPACE file document(): Converts roxygen2 comments into proper R documentation. Updates the NAMESPACE file. Contains all the functions that will be made available to the users of our package. This is based on the @export directive in the roxygen2 skeleton. Don’t edit this by hand. "],["installing-the-package-for-the-first-time.html", "2.15 Installing the package for the first time", " 2.15 Installing the package for the first time Once we have a minimum viable product, install() can be run. Then attach it using library(). At this state, we can test our package as if it was installed. "],["testing-our-package-functions.html", "2.16 Testing our package functions", " 2.16 Testing our package functions We can set up expectations for how our functions work using formalized tests. We’ll discuss this more when we get to the testing chapter. use_testthat() sets up the testing framework. use_test() creates a file for your tests. test() runs all your tests. check() runs R CMD check and your tests "],["using-functions-from-other-packages.html", "2.17 Using functions from other packages", " 2.17 Using functions from other packages We need to import these functions. Use use_package() to show your intent for wanting to use a set of functions within your package. This adds the package to the Imports section of DESCRIPTION. Many options on how to use the functions from imported packages. We will get to this discussion. One way is to be explicit stringr::str_split(). Other options via the use of roxygen2 @import directives Review this example Introduces the rename_files() function Modifying tests Reviews the use of document() and load_all() "],["the-readme-file.html", "2.18 The README file", " 2.18 The README file This is the homepage for the package. The welcome mat. Run use_readme_rmd() to set this up. The purpose of the README.Rmd file is to: Describe the purpose of the package. Provides installation instructions. Highlights a bit of usage. Don’t forget to build the README, build_readme() "],["run-check-and-install-commit-and-push.html", "2.19 Run check() and install(), commit and push", " 2.19 Run check() and install(), commit and push For good measure, run check() and install() Fix any issues. Commit and push "],["meeting-videos-1.html", "2.20 Meeting Videos", " 2.20 Meeting Videos 2.20.1 Cohort 1 2.20.2 Cohort 2 2.20.3 Cohort 3 Meeting chat log 00:13:51 Ryan Metcalf: I can get the ball rolling, I can try chapters 3 &amp; 4. 00:35:53 Ryan Metcalf: Maybe load `use this`? 00:44:13 Brendan Lam: R4DS is my main reference for writing functions 00:44:46 Rex : looking at other packages source code - but those with s3/s4 methods I find trickier to decipher) 00:47:27 Larissa Shaughnessy: Collin I’m going to put something in the slack. I was digging through my docs for it while you were asking about resources - not sure if it gets into the complexity you are asking for but I do find the examples helpful 2.20.4 Cohort 4 "],["system-setup.html", "Chapter 3 System setup", " Chapter 3 System setup Learning objectives: How to check which version of R and RStudio you are using Discover devtools Learn about the {usethis} package Understand the distict difference between useRs and developeRs "],["prepare-your-system.html", "3.1 Prepare your system", " 3.1 Prepare your system To start the preparation of development environment, lets get our bearings. R.Version() ## $platform ## [1] &quot;x86_64-pc-linux-gnu&quot; ## ## $arch ## [1] &quot;x86_64&quot; ## ## $os ## [1] &quot;linux-gnu&quot; ## ## $system ## [1] &quot;x86_64, linux-gnu&quot; ## ## $status ## [1] &quot;&quot; ## ## $major ## [1] &quot;4&quot; ## ## $minor ## [1] &quot;2.0&quot; ## ## $year ## [1] &quot;2022&quot; ## ## $month ## [1] &quot;04&quot; ## ## $day ## [1] &quot;22&quot; ## ## $`svn rev` ## [1] &quot;82229&quot; ## ## $language ## [1] &quot;R&quot; ## ## $version.string ## [1] &quot;R version 4.2.0 (2022-04-22)&quot; ## ## $nickname ## [1] &quot;Vigorous Calisthenics&quot; sessionInfo() ## R version 4.2.0 (2022-04-22) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 20.04.5 LTS ## ## Matrix products: default ## BLAS: /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 ## LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0 ## ## locale: ## [1] LC_CTYPE=C.UTF-8 LC_NUMERIC=C LC_TIME=C.UTF-8 ## [4] LC_COLLATE=C.UTF-8 LC_MONETARY=C.UTF-8 LC_MESSAGES=C.UTF-8 ## [7] LC_PAPER=C.UTF-8 LC_NAME=C LC_ADDRESS=C ## [10] LC_TELEPHONE=C LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] devtools_2.4.5 usethis_2.1.6 ## ## loaded via a namespace (and not attached): ## [1] Rcpp_1.0.9 urlchecker_1.0.1 bslib_0.4.0 compiler_4.2.0 ## [5] later_1.3.0 jquerylib_0.1.4 highr_0.9 remotes_2.4.2 ## [9] profvis_0.3.7 prettyunits_1.1.1 tools_4.2.0 pkgload_1.3.0 ## [13] digest_0.6.30 pkgbuild_1.3.1 jsonlite_1.8.2 evaluate_0.17 ## [17] memoise_2.0.1 lifecycle_1.0.3 rlang_1.0.6 shiny_1.7.2 ## [21] cli_3.4.1 rstudioapi_0.14 yaml_2.3.6 xfun_0.34 ## [25] fastmap_1.1.0 stringr_1.4.1 knitr_1.40 htmlwidgets_1.5.4 ## [29] fs_1.5.2 sass_0.4.2 glue_1.6.2 R6_2.5.1 ## [33] processx_3.7.0 rmarkdown_2.17 bookdown_0.29 sessioninfo_1.2.2 ## [37] callr_3.7.2 purrr_0.3.5 magrittr_2.0.3 ps_1.7.1 ## [41] promises_1.2.0.1 htmltools_0.5.3 ellipsis_0.3.2 mime_0.12 ## [45] xtable_1.8-4 httpuv_1.6.6 stringi_1.7.8 miniUI_0.1.1.1 ## [49] cachem_1.0.6 crayon_1.5.2 Ok, that was fun, but the version check isn’t in the book! We need to follow the author, right? Let’s load some packages to prepare authoring some packages! install.packages(c(&quot;devtools&quot;, &quot;roxygen2&quot;, &quot;testthat&quot;, &quot;knitr&quot;)) NOTE: For some reason, this script caused an infinite loop of restart R, attempt to install, request to restart R, attempt to install…infinity. If this should happen, select No. The author recommends increasing to the Preview version of RStudio Integrated Development Environment (IDE). We are considering outselves developers, right? Usually this isn’t needed or required for common users (we’re not common) It puts you in a position to be subject to bugs (not as many as the daily builds though) Preview version Released version "],["devtools-usethis-and-you.html", "3.2 devtools, usethis, and you", " 3.2 devtools, usethis, and you At some point in your development career…you will find you need to reorder to progress further. This is exactly what happened to the {devtools} package. In 2018, it was reordered and split into seven sub-packages: {remotes} {pkgbuild} {pkgload} {rcmdcheck} {revdepcheck} {sessioninfo} {usethis} What is cool here, we already used one of these packages!!! You can think of devtools as a wrapper providing the ability to: set user-friendly defaults introduce helpful interactive behaviour combine functionality from multiple sub-packages There is a difference in useRs and developeRs. They are: useRs should attach devtools and think of it as the provider of your favorite functions for package development developeRs should NOT depend on devtools, but should instead access functions via the package that is their primary home devtools should rarely appear in the role of foo in a qualified call of the form foo::fcn(). Instead, foo should be the package where fcn() is defined. An exception to this is that we continue to feature devtools::install_github() as the way to install the development version of a package in its README If required, ensure you report bugs to each sub-package Example of how to simulate installing and loading a package (interactive development) library(devtools) load_all() ## ℹ Loading bookclub-rpkgs If used inside an R package, this is the preferred call: pkgload::load_all() ## ℹ Loading bookclub-rpkgs 3.2.1 Personal startup configuration Attach devtools with the following script: library(devtools) Doing this everytime you restart your session gets old…quick! Lets be more efficient with our keystrokes. Let’s edit our .Rprofile file. If it does not exist on your computer, you can run use_devtools() to create it. The output of my command looks like this: use_devtools() • Include this code in &#39;.Rprofile&#39; to make devtools available in all interactive sessions. if (interactive()) { suppressMessages(require(devtools)) } [Copied to clipboard] • Modify &#39;/Users/rmetcalf/.Rprofile&#39; • Restart R for changes to take effect Caution, Warning, HUGE RED FLAG!!!! You are not a Super-person yet! In general, it’s a bad idea to attach packages in .Rprofile, as it invites you to create R scripts that don’t reflect all of their dependencies via explicit calls to library(foo). But devtools is a workflow package that smooths the process of package development and is, therefore, unlikely to get baked into any analysis scripts. Note how we still take care to only attach in interactive sessions. I may be too harsh. The following is a good example when usethis helps and can be added to your .Rprofile. options( usethis.full_name = &quot;Jane Doe&quot;, usethis.description = list( `Authors@R` = &#39;person(&quot;Jane&quot;, &quot;Doe&quot;, email = &quot;jane@example.com&quot;, role = c(&quot;aut&quot;, &quot;cre&quot;)), comment = c(ORCID = &quot;YOUR-ORCID-ID&quot;))&#39;, License = &quot;MIT + file LICENSE&quot;, Version = &quot;0.0.0.9000&quot; ), usethis.protocol = &quot;ssh&quot; ) For history purposes (or at some point it may change….) devtools::install_github(&quot;r-lib/devtools&quot;) devtools::install_github(&quot;r-lib/usethis&quot;) "],["r-build-toolchain.html", "3.3 R build toolchain", " 3.3 R build toolchain Any good developer must have a good compiler. The following three sections will expand on how this may be accomplished via the three main operating systems. NOTE: At this point, these may not be required. The compiler options will becomre important when a source code contains C or C++ code. 3.3.1 Windows On Windows the collection of tools needed for building packages from source is called Rtools. Rtools is NOT an R package and therefore cannot be installed using install.packages('Rtools') During the Rtools installation you may see a window asking you to Select Additional Tasks. DO NOT select the box for Edit the system PATH. DO select the box for Save version information to registry. 3.3.2 macOS If development is on a Mac, you will require Xcode. In shell/terminal run the following code: xcode-select --install NOTE: Xcode is large….like, ~90GBs large (an estimate with all simulators)! There are options to reduce the size and can be found here. Alternatively, you can also download Xcode from the Mac App Store. 3.3.3 Linux Linux install is the simplest (dependent on your distro of choice and package manager). Ensure you include the following: R R development tools For example, on Ubuntu (and Debian): sudo apt-get update &amp; upgrade sudo apt-get install r-base-dev package Other Linux distributions may have alternative commands. 3.3.4 Verify system prep To validate everything is installed or up to date, run the following: devtools::dev_sitrep() Update any packages based on recommendations. "],["meeting-videos-2.html", "3.4 Meeting Videos", " 3.4 Meeting Videos 3.4.1 Cohort 1 3.4.2 Cohort 2 3.4.3 Cohort 3 Meeting chat log 00:10:39 Ryan Metcalf: 20C = 68F. Awesome Temp! 00:36:24 Brendan Lam: 12.3.1 is my version 00:37:54 Larissa Shaughnessy: This just made me realize I need to update from 12.2 so thanks Brendan! 00:48:53 collinberke: Package for styling your console messages: https://cli.r-lib.org/ 01:05:50 Arun Chavan: Mac 01:05:54 Isabella Velásquez: Also Mac 01:05:59 Larissa Shaughnessy: Mac "],["package-structure-and-state.html", "Chapter 4 Package structure and state", " Chapter 4 Package structure and state Learning objectives: Convert implicit knowledge into the explicit knowledge to create and modify R packages Learn about the various states a package Identify the difference between a package and library Understand the use of .Rbuildignore "],["package-states.html", "4.1 Package states", " 4.1 Package states When you create or modify a package, you work on its source code or source files You interact with the in-development package in its source form R Packages can be in five different states: source: Raw form, editable bundled: Compressed to a single archive file (.tar) binary: Compiled, OS Specific (Windows or Mac). It is implied Linux already has the ability to compile if required. installed: Decompressed into a package library in-memory: Explicitly referenced for use Function calls like install.packages() and devtools::install_github() move a package from source, bundled, or binary states into the installed state. Functions like library() bring your package into memory for immediate use. "],["source-package.html", "4.2 Source package", " 4.2 Source package A source package is just a directory of files with a specific structure Source package contains a DESCRIPTION file, and R directory containing .R files, etc… Some of our group have mentioned authoring or writing packages. Many, this is a new subject. Therefore you can view source files by first navigating to CRAN and by extension to its source repository. (Please correct me if my terminology is incorrect). Examples of CRAN landing page: forcats readxl Examples of GitHub/GitLab (or equivelent) version storage: forcats readxl Note: Some maintainers fail to link their source repos. In this case, google is your friend! Even if a package is not developed on a public platform, you can visit its source in the unofficial, read-only mirror maintained by R-hub. Examples: MASS car Note: This mirror is not the same as exploring the package’s true development venue, because this source and its evolution is just reverse-engineered from the package’s CRAN releases. "],["bundled-package.html", "4.3 Bundled package", " 4.3 Bundled package A bundled package is a package that’s been compressed into a single file By extension of Linux, source tarballs or tar.gz files Implying, source files and directories have been archived using the tar utility .tar stands for Tape Archive creates one file out of many files (with some compression) The files are fully compressed using gzip or GNU Zip gzip creates the .gz extension a bundled package is not source nor installed, but rather, an OS-agnostic storage medium If you need to bundle a package your developing, use devtools::build(). TLDR: The devtools::build() calls pkgbuild::build() under the hood and ultimately R CMD build. For more information see Building package tarballs. All CRAN packages are available in bundled form and can be downloaded from their CRAN landing page. On Mac or Linux, run the following, from shell/terminal, to decompress and un-archive: tar xvf forcats_0.4.0.tar.gz Quick explanation, you are calling on the tar utility. -x is extract, -v is verbose (show the output…makes you feel good to know something is happening), and -f is filename, uses the same filename as the archive. Windows users, I’m sorry, you’re going to have to use some type of utility like 7-Zip, WinZip, or WinRAR to decompress and un-archive. Windows does not have a native utility to accomplish this action. (Feel welcome to share your PowerShell examples if I’m incorrect). Note: A bit of research turns up, the tar utility was added to Windows 10, circa 2018. Earlier versions of Windows would require a third-party application. Figure 4.1: Side-by-side comparison of source, bundled, and binary package. The main differences between a source package and an uncompressed bundle are: Vignettes have been built, so rendered outputs, such as HTML, appear below inst/doc/ and a vignette index appears in the build/ directory, usually alongside a PDF package manual. A local source package might contain temporary files used to save time during development, like compilation artifacts in src/. These are never found in a bundle. Any files listed in .Rbuildignore are not included in the bundle. These are typically files that facilitate your development process, but that should be excluded from the distributed product. 4.3.1 .Rbuildignore It is rare to contemplate the .tar.gz structure. However, it IS important to understand the .Rbuildignore file. Rbuildignore controls which files from the source package make it into the downstream forms The concept is similar to other .*ignore files. Exclude versus Include Each line of .Rbuildignore is a Perl-compatible regular expression case insensitive if the regex matches, the file is excluded You must anchor the regular expression for example ^notes$ will exclude any filename string containing notes. a less specific (or more automated method) is to use usethis::use_build_ignore(\"notes\") Rbuildignore is a means to compromise your development environment with CRAN’s requirements. The affected files fall into two broad, semi-overlapping classes: Files that help you generate package contents programmatically. Examples: Using README.Rmd to generate an informative and current README.md. Storing .R scripts to create and update internal or exported data. Files that drive package development, checking, and documentation, outside of CRAN’s purview. Examples: Files relating to the RStudio IDE. Using the pkgdown package to generate a website. Configuration files related to continuous integration/deployment and monitoring test coverage. A non-exhaustive list of typical entries in the .Rbuildignore file ^.*\\.Rproj$ # Designates the directory as an RStudio Project ^\\.Rproj\\.user$ # Used by RStudio for temporary files ^README\\.Rmd$ # An Rmd file used to generate README.md ^LICENSE\\.md$ # Full text of the license ^cran-comments\\.md$ # Comments for CRAN submission ^data-raw$ # Code used to create data included in the package ^pkgdown$ # Resources used for the package website ^_pkgdown\\.yml$ # Configuration info for the package website ^\\.github$ # Contributing guidelines, CoC, issue templates, etc. Note: The commmented text above should not be included in the Rbuildignore file and are only used for explination of each entry. Note: Remember that usethis::use_build_ignore() is an attractive way to manage this file. "],["binary-package.html", "4.4 Binary package", " 4.4 Binary package Binary packages are used when a colleague doesn’t have development tools installed Uses a single file Binary packages are OS-specific Mac: .tgz Windows: .zip Linux: generally already have libraries capable of working with binary packages To make a binary package use devtools::build(binary=TRUE) Under the hood, calls pkgbuild::build(binary=TRUE) and ultimately R CMD INSTALL --build For more information see Building binary packages section of Writing R Extensions The primary maker and distributor of binary is CRAN, not individual maintainers. Examples of downloading binary packages (image) Figure 4.2: Forcats CRAN Binary Download Options Ironically, this download process is exactly what is happening when you call install.packages() Decompressing a binary packages looks rather different from source or bundled package forms Notible Differences: There are no .R files in R/ directory. Instead a more efficient form is used Meta/ directory contains a number or .rds files Actual help/ and html/ are used instead of man/ If you had any code in src/ directory, it will not be in libs/ Windows binary also contains i386/ and x64/ for 32 or 64 bit environments Anything in data/ is converted to more efficient forms Contents of inst/ are moved to top-level (for example vignette files are not in doc/) Some files and folders have been dropped such as README, build/, test/, and vignettes/ . ├── DESCRIPTION ├── INDEX ├── LICENSE ├── Meta │ ├── Rd.rds │ ├── data.rds │ ├── features.rds │ ├── hsearch.rds │ ├── links.rds │ ├── nsInfo.rds │ ├── package.rds │ └── vignette.rds ├── NAMESPACE ├── NEWS.md ├── R │ ├── forcats │ ├── forcats.rdb │ └── forcats.rdx ├── data │ ├── Rdata.rdb │ ├── Rdata.rds │ └── Rdata.rdx ├── doc │ ├── forcats.R │ ├── forcats.Rmd │ ├── forcats.html │ └── index.html ├── help │ ├── AnIndex │ ├── aliases.rds │ ├── figures │ │ ├── README-ordered-plot-1.png │ │ ├── README-unordered-plot-1.png │ │ └── logo.png │ ├── forcats.rdb │ ├── forcats.rdx │ └── paths.rds └── html ├── 00Index.html └── R.css 7 directories, 33 files "],["installed-package.html", "4.5 Installed package", " 4.5 Installed package Installed package is a binary package that has been decompressed into a package library WARNING, COMPLICATED FIGURE AHEAD! LETS DISCUSS IT! In a perfect world, stringing together a set of simple steps: source -&gt; bundle, bundle -&gt; binary, binary -&gt; installed In the REAL world, it isn’t as simple Figure 4.3: Many methods for converting between package states. The cool part of this process, and why this figure is important is, the R CMD INSTALL is the primary service for all forms of packaging. For more information check out Installing packages section of Installing packages section. Devtools exposes a family of install_*() to address needs beyond only install.packages(). Again, more information can be found in remotes package. library(remotes) ## ## Attaching package: &#39;remotes&#39; ## The following objects are masked from &#39;package:devtools&#39;: ## ## dev_package_deps, install_bioc, install_bitbucket, install_cran, ## install_deps, install_dev, install_git, install_github, ## install_gitlab, install_local, install_svn, install_url, ## install_version, update_packages ## The following object is masked from &#39;package:usethis&#39;: ## ## git_credentials funs &lt;- as.character(lsf.str(&quot;package:remotes&quot;)) grep(&quot;^install_.+&quot;, funs, value = TRUE) ## [1] &quot;install_bioc&quot; &quot;install_bitbucket&quot; &quot;install_cran&quot; ## [4] &quot;install_deps&quot; &quot;install_dev&quot; &quot;install_git&quot; ## [7] &quot;install_github&quot; &quot;install_gitlab&quot; &quot;install_local&quot; ## [10] &quot;install_remote&quot; &quot;install_svn&quot; &quot;install_url&quot; ## [13] &quot;install_version&quot; install_github() is the flagship example of this remots library. using devtools/remotes install_*() functions aim at making things possible with base tooling a bit easier or more explicit Example is install_version() which installs a specific version of a CRAN package .Rinstignore lets you keep files present in a package bundle out of the installed package. The use of .Rinstignore is rather obscure or rarely needed TODO: Revisit this section later with respect to pak https://pak.r-lib.org. "],["in-memory-package.html", "4.6 In-memory package", " 4.6 In-memory package Let’s discuss library(usethis). library(usethis) create_package(&quot;~/newpackage&quot;) usethis package has been loaded into memory and attached to the search path Loading and Attaching packages is not important during writing scripts….IT IS EXTREMELY IMPORTANT WHEN WRITING PACKAGES See search path for more details We will learn in section 5.4 “Test drive with load_all()” how devtools::load_all() accelerates development, allowing you to load a source package directly to memory. "],["package-libraries.html", "4.7 Package libraries", " 4.7 Package libraries When calling library(foo), R looks through the current libraries for an installed package foo, and if successful, makes it available. Definition: Library: is a directory containing installed packages. Definition: Packages: are functional instructions to process information. These terms are often misused and reinforced within our vernacular (language dictionary). We use the library() function to load a package. As package prospect R Package Developers, it is a good idea to set the distinction between library and package early To see .libPaths() on Windows, use the following function call: .libPaths() lapply(.libPaths(), list.dirs, recursive = FALSE, full.names = FALSE) To see `.libPaths() on macOS, use the following function call: .libPaths() lapply(.libPaths(), list.dirs, recursive = FALSE, full.names = FALSE) NOTE TO SELF…THESE ARE THE SAME CALLS Considering the output, we view two things: A user library A system-level or global library A user library is typical for a Windows installation, but an opt-in for Mac Users. Depending on your development environment the idea would mean, I can delete my user packages but maintain my base R installation. (Lets discuss this for a moment). If you’re on macOS and only see one library, there is no urgent need to change anything. But next time you upgrade R, consider creating a user-level library. By default, R looks for a user library found at the path stored in the environment variable R_LIBS_USER, which itself defaults to ~/Library/R/x.y/library. When you install, R x.y.z and prior to installing any add-on packages, use dir.create(\"~/Library/R/x.y/library\") to set up a user library. Now you will have the library setup seen above. Alternatively, you could setup a user library elsewhere and tell R about that by setting the R_LIBS_USER environment variable in .Renviron. In is implied you need to re-install user packages for a minor version of R. (3.5.0 to 3.6.0). You generally do not require this for a patch release (3.6.0 to 3.6.1). NOTE: The x.y.z reference previously can also be read as major.minor.patch and is common within software engineering. As we grow and become more sophisticated, our management of packages will become more intricate. Examples like renv and its predecessor packrat() automate the process of managing project-specific libraries An example woudl be loading specific versions of an environment to test forward and backward compatibility Reverse dependency checks are another example of managing the library search path The main levers that control which libraries are active: Environment variables, like R_LIBS and R_LIBS_USER, which are consulted at startup Calling .libPaths() with one or more filepaths Executing small snippets of code with a temporarily altered library search path via withr::with_libpaths() Arguments to individual functions, like install.packages(lib =) and library(lib.loc =). NOTE: library() should NEVER be used inside a package. There are other mechinisims for declaring dependencies. We’ll discuss this more in chapter 13. "],["meeting-videos-3.html", "4.8 Meeting Videos", " 4.8 Meeting Videos 4.8.1 Cohort 1 4.8.2 Cohort 2 4.8.3 Cohort 3 Meeting chat log 00:30:11 Isabella Velásquez: RSPM: https://www.rstudio.com/products/package-manager/ 00:30:16 Isabella Velásquez: and it’s called PyPI! 01:04:57 Isabella Velásquez: https://pypi.org/ 01:15:53 collinberke: Microsoft’s capture of R Packages: https://mran.microsoft.com/documents/rro/reproducibility "],["fundamental-development-workflows.html", "Chapter 5 Fundamental development workflows", " Chapter 5 Fundamental development workflows Learning objectives: When and how to make an R package. RStudio projects. Why not to mess with your working directory. Test driving code. "],["survey-the-existing-landscape.html", "5.1 Survey the existing landscape", " 5.1 Survey the existing landscape Be sure that the package doesn’t overlap too much with existing packages: Is there an existing package that does what you need? Could you contribute to a similar, existing package to add the functionality you need? List of packages on CRAN Payoffs: Product: your life will be better when this functionality is implemented formally, in a package. Process: greater mastery of R will make you more effective in your work. "],["considerations.html", "5.2 Considerations", " 5.2 Considerations Ensure that the package fits in well within the domain of existing R packages. For modelling packages, using the hardhat package helps the developer use best practices and ensures that the resulting package can be used within the tidymodels ecosystem (and get used more). You may also want to include consider including appropriate methods to be consistent with other related, packages. For example, many modelling packages have predict, plot, and summary methods, and users may expect this functionality from a new package that you create. "],["naming-your-package.html", "5.3 Naming your package", " 5.3 Naming your package See the naming convention used for existing packages: List of packages on CRAN Laws: The name can only consist of letters, numbers, and periods, i.e., .. It must start with a letter. It cannot end with a period. (no underscores _ or hyphens -) Recommendations: No periods. Easy to Google. Avoid confusion with an existing R package (not on CRAN/Bioconductor/GitHub) or well known package from other language (numpy, pandas) All lower case if possible. Abbreviations to reduce name length (brms = Bayesian Regression Models using Stan) Adding in capital R’s for fun. Not getting sued (facebook Rfacebook, Dropbox RDrop, apple appler) Here is a fun blog post on naming R packages by Nick Tierney. Also recommend checking out his package greta which is really cool and has useful example of using python (to access tensorflow) from R in a package. He also has a guide on renaming an R package "],["creating-a-new-package.html", "5.4 Creating a new package", " 5.4 Creating a new package Call usethis::create_package('yourPackageName') In RStudio, do File &gt; New Project &gt; New Directory &gt; R Package. This ultimately calls usethis::create_package(), so really there’s just one way. (I prefer to use RStudio - show using create_package from bash) 5.4.1 What does this do? This creates your project structure for you: R/ directory DESCRIPTION file NAMESPACE file pkgName.Rproj file .Rbuildignore &amp; .gitignore DO NOT use package.skeleton() - it creates a package which will lead to errors when running R CMD build and is not consistent with the devtools style of development. 5.4.2 Where to put this package? This is distinct from where your R packages are installed. It makes sense to put this in a similar area to where you keep your other R projects. Within my /user/documents/, I have R_projects/ and R_pkgs/ "],["using-rstudio-projects.html", "5.5 Using RStudio Projects", " 5.5 Using RStudio Projects You can use devtools without using RStudio and visa versa, but it’s not as nice. 5.5.1 Benefits of RStudio Projects Each project is isolated and code is contained within the project. Easy to start up a project in a fresh instance of RStudio. Helps mitigate workspace overlap (e.g., function masking and overwriting accidentally same-named objects) Keyboard shortcuts for common code development tasks (build, load, test, document, check) alt-shift-k for shortcuts 5.5.2 Make an R Project for an existing package If you already have an R package which isn’t within an R Project, you can: In RStudio, do File &gt; New Project &gt; Existing Directory. Call usethis::create_package() with the path to the pre-existing R source package. Call usethis::use_rstudio(), with the active usethis project set to an existing R package. In practice, this probably means you just need to make sure working directory is inside the pre-existing package. (using usethis::use_rstudio() from bash fixes the problem of the other not being created) 5.5.3 R Project tidbits A directory for an R Project will have a .Rproj file, typically with the same name as the directory (and the package if the project is a package). It’s best case for all of these names to be the same. This file is just a text file and you don’t need to modify it by hand. It’s possible to modify it with ‘Project Options…’ in RStudio (drop down on top right). Launch an R Project by double clicking the .Rproj file or from within RStudio. "],["rstudio-usethis-and-working-directories.html", "5.6 RStudio, usethis and working directories", " 5.6 RStudio, usethis and working directories usethis functions don’t take a path (i.e. usethis::use_r(\"new_fx\")) usethis assumes that the following coincide: The current RStudio Project. The active usethis project. Current working directory for the R process. It’s therefore much easier to not mess with your working directory for your R console. Leave it as the project directory so that when you’re calling functions from usethis, it puts things in the right place. You can double check that these three directories are coinciding by running: usethis::proj_sitrep() ## • working_directory: &#39;/home/runner/work/bookclub-rpkgs/bookclub-rpkgs&#39; ## • active_usethis_proj: &lt;unset&gt; ## • active_rstudio_proj: &lt;unset&gt; ## • There is currently no active usethis project. ## usethis attempts to activate a project upon first need. ## Call `proj_get()` to initiate project discovery. ## Call `proj_set(&quot;path/to/project&quot;)` or `proj_activate(&quot;path/to/project&quot;)` to provide ## an explicit path. Similarly, when you run helper functions from devtools to develop your package (document(), check(), test()), these are also expecting your working directory to be the project directory. The also expect that your project follows the conventions of project structure (test scripts living in tests/, R code living in R/, vignettes living in vignettes/ compiled code living in src/, images living in man/figures/ etc). "],["test-driving-a-package.html", "5.7 Test driving a package", " 5.7 Test driving a package pkgload diagram 5.7.1 Using load_all() Running load_all() is the fastest way to re-load the functions in your package – much faster than installing it (install.packages(pkgName)) and loading it into memory library(pkgName). This is helpful for iteratively updating or tweaking functions you’re working on. 5.7.2 Using test() Running test() runs load_all() and then the test files that live in tests/testthat/. If you have a test file which captures the behaviour in the function that you desire, you can quickly assess whether the changes you make in the function have worked by running test(). 5.7.3 Coping with being impatient check() can take a long time and leave your console occupied. A solution to this is to run using the build tab (ctrl-shift-E) or as a separate job: job::job({check()}) To test examples in your documentation without running check(): run_examples() 5.7.4 (Previous speaker’s) bad habit I like to have a working_space.Rmd in the package directory which I use to test package code away from the console. You’ll get a NOTE on the check: N checking top-level files … Non-standard file/directory found at top level: &#39;working_space.Rmd&#39; But you could also add this to .Rbuildignore/.gitignore. It can be tricky to incorporate everything into a test script, and sometimes you may want to have a closer look at what’s going on within a function. This can more easily be done by throwing some earlier return()s into your package functions, run load_all() to make them effective and then running code in your working_space.Rmd file. "],["meeting-videos-4.html", "5.8 Meeting Videos", " 5.8 Meeting Videos 5.8.1 Cohort 1 5.8.2 Cohort 2 5.8.3 Cohort 3 Meeting chat log 00:25:44 Ryan Metcalf: Mac: Opt-&gt;Shift-&gt;k 00:32:09 Ryan Metcalf: The first link wasn’t credible. There is a `{changer}` additional add in, that may aid in naming convention change. https://cran.r-project.org/web/packages/changer/changer.pdf 00:34:36 Isabella Velásquez: here’s an article (by Nick Tierney!) on how to change package names (note, it is from 2017): https://www.njtierney.com/post/2017/10/27/change-pkg-name/ 00:57:23 Isabella Velásquez: https://twitter.com/jayyqi/status/1228049523806617601?ref_src=twsrc%5Etfw%7Ctwcamp%5Etweetembed%7Ctwterm%5E1228049523806617601%7Ctwgr%5E%7Ctwcon%5Es1_&amp;ref_url=https%3A%2F%2Fivelasq.rbind.io%2Fblog%2Fyou-cran-do-it%2F 01:01:12 Brendan Lam: This is helpful^ Thanks! 01:01:44 Isabella Velásquez: Is this what you are referring to? RMarkdown Driven Development (RmdDD) https://emilyriederer.netlify.app/post/rmarkdown-driven-development/ 01:03:25 collinberke: Yes! 01:04:04 collinberke: https://www.youtube.com/watch?v=eMWgu9OQ0m8&amp;list=PL3x6DOfs2NGiXMln8bxY7e0XgA5z1cp-8&amp;index=4 01:04:24 Isabella Velásquez: Thanks! 01:06:39 Ryan Metcalf: https://www.rstudio.com/conference/ 01:06:49 Isabella Velásquez: HAVE to 01:10:21 Isabella Velásquez: Here’s a video of Emily’s talk from a conf in the past : https://www.youtube.com/watch?v=B6YO5nW46SU 01:16:22 Ryan Metcalf: `git checkout -b &lt;name of your branch&gt;` "],["the-package-within.html", "Chapter 6 The package within", " Chapter 6 The package within Purpose To walk through the building of a toy package, with an emphasis on the package’s R code and how it differs from R code in a script. Data analysis script \\(\\rightarrow\\) Isolate and extract the reusable data and logic from the script \\(\\rightarrow\\) Put code into an R package \\(\\rightarrow\\) Use package in a newly simplified script "],["alfa-a-script-that-works.html", "6.1 Alfa: a script that works", " 6.1 Alfa: a script that works A fictional script for a dataset of people who went for a swim. Where did you swim and how hot was it outside? infile &lt;- &quot;swim.csv&quot; (dat &lt;- read.csv(infile)) #&gt; name where temp #&gt; 1 Adam beach 95 #&gt; 2 Bess coast 91 #&gt; 3 Cora seashore 28 #&gt; 4 Dale beach 85 #&gt; 5 Evan seaside 31 Observations were classified as American or British based on how they described the beach: dat$english[dat$where == &quot;beach&quot;] &lt;- &quot;US&quot; dat$english[dat$where == &quot;coast&quot;] &lt;- &quot;US&quot; dat$english[dat$where == &quot;seashore&quot;] &lt;- &quot;UK&quot; dat$english[dat$where == &quot;seaside&quot;] &lt;- &quot;UK&quot; Temperatures were converted to Celsius: dat$temp[dat$english == &quot;US&quot;] &lt;- (dat$temp[dat$english == &quot;US&quot;] - 32) * 5/9 dat #&gt; name where temp english #&gt; 1 Adam beach 35.0 US #&gt; 2 Bess coast 32.8 US #&gt; 3 Cora seashore 28.0 UK #&gt; 4 Dale beach 29.4 US #&gt; 5 Evan seaside 31.0 UK Data is written back to a csv file. A timestamp is also captured in the filename. now &lt;- Sys.time() timestamp &lt;- format(now, &quot;%Y-%B-%d_%H-%M-%S&quot;) (outfile &lt;- paste0(timestamp, &quot;_&quot;, sub(&quot;(.*)([.]csv$)&quot;, &quot;\\\\1_clean\\\\2&quot;, infile))) #&gt; [1] &quot;2022-April-17_07-14-16_swim_clean.csv&quot; write.csv(dat, file = outfile, quote = FALSE, row.names = FALSE) "],["bravo-a-better-script-that-works.html", "6.2 Bravo: a better script that works", " 6.2 Bravo: a better script that works There’s a package that lurks within the original script (apparently) Suboptimal coding practices like repetitive code and mixing of code and data Next version of the script: library(tidyverse) infile &lt;- &quot;swim.csv&quot; dat &lt;- read_csv(infile, col_types = cols(name = &quot;c&quot;, where = &quot;c&quot;, temp = &quot;d&quot;)) lookup_table &lt;- tribble( ~where, ~english, &quot;beach&quot;, &quot;US&quot;, &quot;coast&quot;, &quot;US&quot;, &quot;seashore&quot;, &quot;UK&quot;, &quot;seaside&quot;, &quot;UK&quot; ) dat &lt;- dat %&gt;% left_join(lookup_table) #&gt; Joining, by = &quot;where&quot; f_to_c &lt;- function(x) (x - 32) * 5/9 dat &lt;- dat %&gt;% mutate(temp = if_else(english == &quot;US&quot;, f_to_c(temp), temp)) dat #&gt; # A tibble: 5 × 4 #&gt; name where temp english #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; #&gt; 1 Adam beach 35 US #&gt; 2 Bess coast 32.8 US #&gt; 3 Cora seashore 28 UK #&gt; 4 Dale beach 29.4 US #&gt; 5 Evan seaside 31 UK now &lt;- Sys.time() timestamp &lt;- function(time) format(time, &quot;%Y-%B-%d_%H-%M-%S&quot;) outfile_path &lt;- function(infile) { paste0(timestamp(now), &quot;_&quot;, sub(&quot;(.*)([.]csv$)&quot;, &quot;\\\\1_clean\\\\2&quot;, infile)) } write_csv(dat, outfile_path(infile)) Key features of this code: using functions from tidyverse packages different “beach” words are stored in a lookup table. This makes it easier to add words in the future. f_to_c(), timestamp(), and outfile_path() functions now hold the logic for converting temperatures and forming the timestamped output file name. "],["charlie-external-helpers.html", "6.3 Charlie: external helpers", " 6.3 Charlie: external helpers Move reusable data and logic out of the analysis script and into separate files. library(tidyverse) localize_beach &lt;- function(dat) { lookup_table &lt;- read_csv( &quot;beach-lookup-table.csv&quot;, col_types = cols(where = &quot;c&quot;, english = &quot;c&quot;) ) left_join(dat, lookup_table) } f_to_c &lt;- function(x) (x - 32) * 5/9 celsify_temp &lt;- function(dat) { mutate(dat, temp = if_else(english == &quot;US&quot;, f_to_c(temp), temp)) } now &lt;- Sys.time() timestamp &lt;- function(time) format(time, &quot;%Y-%B-%d_%H-%M-%S&quot;) outfile_path &lt;- function(infile) { paste0(timestamp(now), &quot;_&quot;, sub(&quot;(.*)([.]csv$)&quot;, &quot;\\\\1_clean\\\\2&quot;, infile)) } High-level helper functions like localize_beach() and celsify_temp(), were added to the pre-existing helpers (f_to_c(), timestamp(), and outfile_path()) library(tidyverse) source(&quot;cleaning-helpers.R&quot;) infile &lt;- &quot;swim.csv&quot; dat &lt;- read_csv(infile, col_types = cols(name = &quot;c&quot;, where = &quot;c&quot;, temp = &quot;d&quot;)) (dat &lt;- dat %&gt;% localize_beach() %&gt;% celsify_temp()) #&gt; Joining, by = &quot;where&quot; #&gt; # A tibble: 5 × 4 #&gt; name where temp english #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; #&gt; 1 Adam beach 35 US #&gt; 2 Bess coast 32.8 US #&gt; 3 Cora seashore 28 UK #&gt; 4 Dale beach 29.4 US #&gt; 5 Evan seaside 31 UK write_csv(dat, outfile_path(infile)) Script is now much shorter (and cleaner). However, whether it’s easier depends on personal preference and what “feels” easier to work with. "],["delta-an-attempt-at-a-package.html", "6.4 Delta: an attempt at a package", " 6.4 Delta: an attempt at a package Use usethis::create_package() to scaffold a new R package Copy cleaning-helpers.R into the new package, specifically, to R/cleaning-helpers.R Copy beach-lookup-table.csv into the top-level of the new source package install package Script we’re trying to run: library(tidyverse) library(delta) # originally source(&quot;cleaning-helpers.R&quot;) infile &lt;- &quot;swim.csv&quot; dat &lt;- read_csv(infile, col_types = cols(name = &quot;c&quot;, where = &quot;c&quot;, temp = &quot;d&quot;)) dat &lt;- dat %&gt;% localize_beach() %&gt;% celsify_temp() write_csv(dat, outfile_path(infile)) Results when we try to run this code: library(tidyverse) library(delta) infile &lt;- &quot;swim.csv&quot; dat &lt;- read_csv(infile, col_types = cols(name = &quot;c&quot;, where = &quot;c&quot;, temp = &quot;d&quot;)) dat &lt;- dat %&gt;% localize_beach() %&gt;% celsify_temp() &gt; Error in localize_beach(.) : could not find function &quot;localize_beach&quot; write_csv(dat, outfile_path(infile)) &gt; Error in outfile_path(infile) : could not find function &quot;outfile_path&quot; Despite calling our library(delta), none of the functions were actually available to use. This is because we only attached the package, rather than sourcing the file with helper functions. Attaching a package does not put the functions in the global workspace. We can export these functions properly by putting @export in the roxygen comment above each function #&#39; @export celsify_temp &lt;- function(dat) { mutate(dat, temp = if_else(english == &quot;US&quot;, f_to_c(temp), temp)) } Now our script works (sort of)! library(tidyverse) library(delta) infile &lt;- &quot;swim.csv&quot; dat &lt;- read_csv(infile, col_types = cols(name = &quot;c&quot;, where = &quot;c&quot;, temp = &quot;d&quot;)) dat &lt;- dat %&gt;% localize_beach() %&gt;% celsify_temp() #&gt; Error: &#39;beach-lookup-table.csv&#39; does not exist in current working directory (&#39;/Users/jenny/tmp&#39;). write_csv(dat, outfile_path(infile)) Problem: You can’t dump CSV files into the source of an R package and expect it to work. Despite this, you can still install and attach this package. This means that broken packages can still be used. To prevent this, you should run R CMD check or check() often during development. Doing so will alert you to the problem: * installing *source* package ‘delta’ ... ** using staged installation ** R ** byte-compile and prepare package for lazy loading Error in library(tidyverse) : there is no package called ‘tidyverse’ Error: unable to load R code in package ‘delta’ Execution halted ERROR: lazy loading failed for package ‘delta’ * removing ‘/Users/brendan/RScripts/delta.Rcheck/delta’ What are the reasons behing these errors? Package was declared incorrectly While you can load a package using library(tidyverse) in a script, dependencies on other packages must be declared in the DESCRIPTION "],["echo-a-working-package.html", "6.5 Echo: a working package", " 6.5 Echo: a working package Now we’ll make a package that actually works: lookup_table &lt;- dplyr::tribble( ~where, ~english, &quot;beach&quot;, &quot;US&quot;, &quot;coast&quot;, &quot;US&quot;, &quot;seashore&quot;, &quot;UK&quot;, &quot;seaside&quot;, &quot;UK&quot; ) #&#39; @export localize_beach &lt;- function(dat) { dplyr::left_join(dat, lookup_table) } f_to_c &lt;- function(x) (x - 32) * 5/9 #&#39; @export celsify_temp &lt;- function(dat) { dplyr::mutate(dat, temp = dplyr::if_else(english == &quot;US&quot;, f_to_c(temp), temp)) } now &lt;- Sys.time() timestamp &lt;- function(time) format(time, &quot;%Y-%B-%d_%H-%M-%S&quot;) #&#39; @export outfile_path &lt;- function(infile) { paste0(timestamp(now), &quot;_&quot;, sub(&quot;(.*)([.]csv$)&quot;, &quot;\\\\1_clean\\\\2&quot;, infile)) } Note: To fix our initial problem with loading a CSV file, we’ve created lookup_table to create a data frame instead. However, Chapter 14 provides more guidance and recommendations on how to load datasets properly. Other Note: When calling functions from other packages, we should specify the package that we’re using (e.g., dplyr::mutate()). Moreover, we should identify the specific package being used, rather than the meta-package (e.g., do not use tidyverse::mutate()) All of the user-facing functions have an @export tag in their roxygen comment, which means that devtools::document() adds them correctly to the NAMESPACE file. This package can be installed, but we receive 1 note and 1 warning: * checking R code for possible problems ... NOTE celsify_temp: no visible binding for global variable ‘english’ celsify_temp: no visible binding for global variable ‘temp’ Undefined global functions or variables: english temp * checking for missing documentation entries ... WARNING Undocumented code objects: ‘celsify_temp’ ‘localize_beach’ ‘outfile_path’ All user-level objects in a package should have documentation entries. See chapter ‘Writing R documentation files’ in the ‘Writing R Extensions’ manual. Translation of first warnings: no visible binding for global variable ‘english’ and no visible binding for global variable ‘temp’ Using bare variable names like english and temp looks suspicious because you’re using unquoted variable names from dplyr inside a package. defining these variables globally eliminates the note: option 1 (then you should also put utils in Imports) utils::globalVariables(c(&quot;english&quot;, &quot;temp&quot;)) option 2 english &lt;- temp &lt;- NULL The other note we received from R: \"Undocumented code objects: ‘celsify_temp’ ‘localize_beach’ ‘outfile_path’ All user-level objects in a package should have documentation entries.\" This is caused by not documenting exported functions. Using roxygen comments to document it should solve the problem. "],["foxtrot-build-time-vs.-run-time.html", "6.6 Foxtrot: build time vs. run time", " 6.6 Foxtrot: build time vs. run time Another problem: For this package, the timestamps don’t seem to work properly.. Sys.time() #&gt; [1] &quot;2022-02-24 20:49:59 PST&quot; outfile_path(&quot;INFILE.csv&quot;) #&gt; [1] &quot;2020-September-03_11-06-33_INFILE_clean.csv&quot; The timestamp reflects the time that the function was initially run, rather than the current time. Source of the problem: The Sys.time() function outside the outfile_path definition. The Sys.time is executed when the package is built, but never again. Code outside your functions is only built once at build time. Moving Sys.time so that it’s no longer top level code: # always timestamp as &quot;now&quot; outfile_path &lt;- function(infile) { ts &lt;- timestamp(Sys.time()) paste0(ts, &quot;_&quot;, sub(&quot;(.*)([.]csv$)&quot;, &quot;\\\\1_clean\\\\2&quot;, infile)) } # allow user to provide a time, but default to &quot;now&quot; outfile_path &lt;- function(infile, time = Sys.time()) { ts &lt;- timestamp(time) paste0(ts, &quot;_&quot;, sub(&quot;(.*)([.]csv$)&quot;, &quot;\\\\1_clean\\\\2&quot;, infile)) } Takeaway: Need to have a different mindset when defining objects for a package. The objects should be functions and these functions should (generally) only use data they create or that is passed via an argument. "],["golf-side-effects.html", "6.7 Golf: side effects", " 6.7 Golf: side effects A new concern with the timestamp: The timestamps depend on which part of the world you’re in. location timestamp LC_TIME tz Rome, Italy 2020-settembre-05_00-30-00 it_IT.UTF-8 Europe/Rome Warsaw, Poland 2020-września-05_00-30-00 pl_PL.UTF-8 Europe/Warsaw Sao Paulo, Brazil 2020-setembro-04_19-30-00 pt_BR.UTF-8 America/Sao_Paulo Greenwich, England 2020-September-04_23-30-00 en_GB.UTF-8 Europe/London Proposed Solution: Create timestamps that are all in a fixed time zone. We can force a certain locale with Sys.setlocale() and force a particular time zone by adjusting the TZ environment variable. Our attempt at implementing this: timestamp &lt;- function(time = Sys.time()) { Sys.setlocale(&quot;LC_TIME&quot;, &quot;C&quot;) Sys.setenv(TZ = &quot;UTC&quot;) format(time, &quot;%Y-%B-%d_%H-%M-%S&quot;) } However, a user in Brazil would see this after using outfile_path() from our package: outfile_path(&quot;INFILE.csv&quot;) #&gt; [1] &quot;2022-April-17_07-14-18_INFILE_clean.csv&quot; format(Sys.time(), &quot;%Y-%B-%d_%H-%M-%S&quot;) #&gt; [1] &quot;2022-April-17_07-14-18&quot; Our calls to Sys.setlocale() and Sys.setenv() inside timestamp() have made persistent changes to their R session. This sort of side effect is very undesirable and is extremely difficult to track down and debug, especially in more complicated settings. Solution: # use withr::local_*() functions to keep the changes local to timestamp() timestamp &lt;- function(time = Sys.time()) { withr::local_locale(c(&quot;LC_TIME&quot; = &quot;C&quot;)) withr::local_timezone(&quot;UTC&quot;) format(time, &quot;%Y-%B-%d_%H-%M-%S&quot;) } # use the tz argument to format.POSIXct() timestamp &lt;- function(time = Sys.time()) { withr::local_locale(c(&quot;LC_TIME&quot; = &quot;C&quot;)) format(time, &quot;%Y-%B-%d_%H-%M-%S&quot;, tz = &quot;UTC&quot;) } # put the format() call inside withr::with_*() timestamp &lt;- function(time = Sys.time()) { withr::with_locale( c(&quot;LC_TIME&quot; = &quot;C&quot;), format(time, &quot;%Y-%B-%d_%H-%M-%S&quot;, tz = &quot;UTC&quot;) ) } The locale in our timestamp is only temporarily modified with the withr::with_locale function. In this example, the mistake we made was changing the user’s overall state. If you have to do this, make sure this is documented explicitly or try to make them reversible "],["meeting-videos-5.html", "6.8 Meeting Videos", " 6.8 Meeting Videos 6.8.1 Cohort 1 6.8.2 Cohort 2 6.8.3 Cohort 3 Meeting chat log 00:45:32 collinberke: Check this out regarding side effects: https://withr.r-lib.org/articles/changing-and-restoring-state.html 00:55:58 Arun Chavan: https://rstats.wtf/ 00:58:05 Isabella Velásquez: https://yihui.org/knitr/options/ 00:59:31 Arun Chavan: +1 for knitr options because the tab autocompletion doesn’t work for them (at least for me) 01:00:58 Brendan Lam: I&#39;m gonna try that "],["r-code.html", "Chapter 7 R code", " Chapter 7 R code Learning objectives: Organize functions into files. Maintain a consistent coding style. Compare and contrast functions in a package versus functions in a script. "],["organise-functions-into-files.html", "7.1 Organise functions into files", " 7.1 Organise functions into files 7.1.1 Only one hard rule Function definitions must be in .R files in the R/ directory. 7.1.2 Conventions File names should be meaningful and convey which functions are defined within The two extremes are bad: One file per function All functions in the same file Group functions into files One function in one file if the function is very large, with lots of documentation Main function and supporting function in one file (e.g. tidyr/R/separate) A family of related functions in one file (e.g. tidyr/R/rectangle.R) One function in one file if the function doesn’t neatly fit any other grouping (e.g tidyr/R/uncount.R) Small helper functions used in functions across different files are typically stored in R/utils.R by convention "],["fast-feedback-via-load_all.html", "7.2 Fast feedback via load_all()", " 7.2 Fast feedback via load_all() Reminder to use load_all() to try out the functions in file under /R. "],["code-style.html", "7.3 Code style", " 7.3 Code style What and why: the tidyverse style guide How: the {styler} package styler::style_pkg() restyles an entire R package. styler::style_dir() restyles all files in a directory. usethis::use_tidy_style() is wrapper that applies one of the above functions depending on whether the current project is an R package or not. styler::style_file() restyles a single file. styler::style_text() restyles a character vector. "],["understanding-when-code-is-executed.html", "7.4 Understanding when code is executed", " 7.4 Understanding when code is executed 7.4.1 When code is executed in scripts vs. in packages Code in scripts, run interactively (in an IDE or with source()) or non-interactively with Rscript: is run … when you run it(!) Code in a package: is run when the package is built Code in /R is executed and results are saved when the binary package is built (often, by CRAN) (“build time”) The cached results are re-loaded and made available for use When you load a package with library() (“load time”) This means that: for macOS and Windows users of CRAN packages, build time is whenever CRAN built the binary package for their OS. for those who install packages from source, build time is when they (built and) installed the package. (Building of the package is what is accomplished by R CMD INSTALL --build, not R CMD build, which makes a bundled package, i.e. a “source tarball”). 7.4.2 Real world example: Sys.time() x &lt;- Sys.time() In a script x tells you when the script was run. In a package, x tells you when the package was built. 7.4.3 Real world example: system.file() The shinybootstrap2 package once had this code below R/ which works fine when the package is built on the same machine as it is used on. dataTableDependency &lt;- list( htmlDependency( &quot;datatables&quot;, &quot;1.10.2&quot;, c(file = system.file(&quot;www/datatables&quot;, package = &quot;shinybootstrap2&quot;)), script = &quot;js/jquery.dataTables.min.js&quot; ), htmlDependency( &quot;datatables-bootstrap&quot;, &quot;1.10.2&quot;, c(file = system.file(&quot;www/datatables&quot;, package = &quot;shinybootstrap2&quot;)), stylesheet = c(&quot;css/dataTables.bootstrap.css&quot;, &quot;css/dataTables.extra.css&quot;), script = &quot;js/dataTables.bootstrap.js&quot; ) ) The solution is to call system.file() from a function, at run time. 7.4.4 Real world example: Aliasing a function 7.4.4.1 Don’t do this foo &lt;- pkgB::blah 7.4.4.2 Do this foo &lt;- function(...) pkgB::blah(...) "],["respect-the-r-landscape.html", "7.5 Respect the R landscape", " 7.5 Respect the R landscape People will use your package in situations that you never imagined. This means that you have to pay attention to the R landscape (i.e. not only available functions and objects, but all the global settings) 7.5.1 Examples of actions that change the R landscape Loading a package with library() Changing global options with options() Changing the working directory with setwd() 7.5.2 How to know when you have changed the R landscape If the behavior of other functions differs before and after running your function, you have modified the landscape. 7.5.3 Tips to avoid changing the landscape with your functions Don’t use library() or require(). Use the DESCRIPTION to specify your package’s requirements. Never use source() to load from a file. Non-exhaustive list of other functions that should be used with caution. options() par() setwd() Sys.setenv() set.seed() Flip side of this is that you shouldn’t rely on user’s landscape. 7.5.4 What if you have to use one of the above functions and alter the landscape? Make sure to clean up after yourself. 7.5.4.1 Manage state with withr withr::defer() is inspired by base::on.exit(). The general pattern is: to capture the original state schedule its eventual restoration then make the state change for example, below, where some setters like options() and par() return the old value when you provide a new one, allowing you to do something like this. f &lt;- function(x, y, z) { ... old &lt;- options(mfrow = c(2, 2), pty = &quot;s&quot;) defer(options(old)) ... } withr::defer() can also be using in the global environment for developing code interactively, and cleaned up with withr::deferred_clear(). 7.5.4.2 Restoring state with base::on.exit() Very similar to withr::defer() Note that we use the add = TRUE argument, which adds to the list of deferred cleanup tasks rather than replace them. g &lt;- function(a, b, c) { ... scratch_file &lt;- tempfile() on.exit(unlink(scratch_file), add = TRUE) file.create(scratch_file) ... } 7.5.4.3 Isolate side-effects Often you can’t avoid creating side effects, e.g. printing output or creating plots Good practice is to isolate them in functions that only produce output. e.g. instead of combining them into one function, write two functions for data wrangling and plotting, respectively. 7.5.4.4 When you do need side-effects Most common when your package talks to an external system You may need to: Display a message when your package loads Set custom options for your package with options() Use .onLoad() and .onAttach() (mostly the former) .onAttach &lt;- function(libname, pkgname) { packageStartupMessage(&quot;Welcome to my package&quot;) } Use .onUnload() to to clean up side effects. .onLoad() etc. are conventionally stored in R/zzz.R "],["constant-health-checks.html", "7.6 Constant health checks", " 7.6 Constant health checks Here is a typical sequence of calls when using devtools for package development: Edit one or more files below R/. document() (if you’ve made any changes that impact help files or NAMESPACE) load_all() Run some examples interactively. test() (or test_file()) check() Experienced developers cycle through these steps frequently and rapidly (remember, fast feedback!). Lack of comfort with these steps often leads to a dysfunctional workflow, that looks look like below, and makes it difficult to spot bugs as they arise. Edit one or more files below R/. Build, install, and use the package. Iterate occasionally with previous step. Write documentation (once the code is “done”). Write tests (once the code is “done”). Run R CMD check right before submitting to CRAN or releasing in some other way. "],["cran-notes.html", "7.7 CRAN notes", " 7.7 CRAN notes If you are submitting to CRAN, you must use only ASCII characters in your .R files. i.e. 0-9, a-Z, common punctuation If you need to use a Unicode character, you can specify it in the special unicode escape “\\u1234” format. x &lt;- &quot;This is a bullet •&quot; y &lt;- &quot;This is a bullet \\u2022&quot; identical(x, y) #&gt; [1] TRUE cat(stringi::stri_escape_unicode(x)) #&gt; This is a bullet \\u2022 "],["meeting-videos-6.html", "7.8 Meeting Videos", " 7.8 Meeting Videos 7.8.1 Cohort 1 7.8.2 Cohort 2 7.8.3 Cohort 3 "],["data.html", "Chapter 8 Data", " Chapter 8 Data Learning objectives: THESE ARE NICE TO HAVE BUT NOT ABSOLUTELY NECESSARY "],["slide-1.html", "8.1 SLIDE 1", " 8.1 SLIDE 1 ADD SLIDES AS SECTIONS (##). TRY TO KEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF. "],["meeting-videos-7.html", "8.2 Meeting Videos", " 8.2 Meeting Videos 8.2.1 Cohort 1 8.2.2 Cohort 2 "],["other-components.html", "Chapter 9 Other components", " Chapter 9 Other components Learning objectives: THESE ARE NICE TO HAVE BUT NOT ABSOLUTELY NECESSARY "],["slide-1-1.html", "9.1 SLIDE 1", " 9.1 SLIDE 1 ADD SLIDES AS SECTIONS (##). TRY TO KEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF. "],["meeting-videos-8.html", "9.2 Meeting Videos", " 9.2 Meeting Videos 9.2.1 Cohort 1 9.2.2 Cohort 2 "],["description-and-namespace.html", "Chapter 10 DESCRIPTION and NAMESPACE", " Chapter 10 DESCRIPTION and NAMESPACE Learning objectives: Understand the DESCRIPTION file and the most important package metadata Declare dependencies with Imports, Suggests, Depends, LinkingTo, and Enhances fields Add title, description, authors Preview license, version "],["description-file.html", "10.1 DESCRIPTION File", " 10.1 DESCRIPTION File Every package has a DESCRIPTION and if it has a DESCRIPTION file then it is a package usethis::create_package(\"mypackage\") adds a DESCRIPTION file You can set a custom DESCRIPTION file with usethis.description Example DESCRIPTION file: Package: mypackage Title: What the Package Does (One Line, Title Case) Version: 0.0.0.9000 Authors@R: person(&quot;First&quot;, &quot;Last&quot;, , &quot;first.last@example.com&quot;, role = c(&quot;aut&quot;, &quot;cre&quot;), comment = c(ORCID = &quot;YOUR-ORCID-ID&quot;)) Description: The description of a package is usually long, spanning multiple lines. The second and subsequent lines should be indented, usually with four spaces. License: `use_mit_license()`, `use_gpl3_license()` or friends to pick a license Encoding: UTF-8 Roxygen: list(markdown = TRUE) RoxygenNote: 7.2.0 "],["dependencies.html", "10.2 Dependencies", " 10.2 Dependencies The DESCRIPTION file lists the packages that your package needs to work. 10.2.1 Imports Must be present at runtime Automatically installs missing packages when your package is installed devtools::load_all() checks too Installed but not attached; to attach, use package::function() within package Imports: dplyr, tidyr 10.2.2 Suggests Your package can use these packages, but doesn’t require them “Isn’t terribly relevant for packages where the user base is approximately equal to the development team” Does not automatically install missing packages when your package is installed Add for development tasks or to unlock additional functionality (run tests, build vignettes / examples) or rarely needed packages or tricky packages Suggests: ggplot2, testthat 10.2.2.1 Guarding use of suggested packages Or, how to write functions in your package with suggested packages in a way that won’t cause issues for your users Use requireNamespace(\"pkg\", quietly = TRUE), which tries to load “pkg”. If a package isn’t installed, loading will fail with an error rlang has some functions to do the below with other handy features Stop function if it cannot load the package and send a message to install package # the suggested package is required my_fun &lt;- function(a, b) { if (!requireNamespace(&quot;pkg&quot;, quietly = TRUE)) { stop( &quot;Package \\&quot;pkg\\&quot; must be installed to use this function.&quot;, call. = FALSE ) } # code that includes calls such as pkg::f() } Escape part that needs the package and do something else If package is installed, then package will be loaded and run pkg::f() If it is not installed, it will fail to load, escape first part of if-else statement, and run g() # the suggested package is optional; a fallback method is available my_fun &lt;- function(a, b) { if (requireNamespace(&quot;pkg&quot;, quietly = TRUE)) { pkg::f() } else { g() } } About requireNamespace() Can also use require() for examples From Chapter 13: require() loads and attaches; requireNamespace() just loads requireNamespace() will fail if package is not installed; use it if that is when you want your script to fail; use require() want to use the package for something An example is basically the only place where we would use require() inside a package Pretty good Reddit thread Tests In tests, it is not as necessary to guard the use of a suggested package The tidyverse team assumes the package is available They should be caught by R CMD check But if you really want to guard the use of them in a test, you can use testthat::skip_if_not_installed(). In the case below, it is because installing sf can be difficult and skipping this test allows the user to run the other tests. test_that(&quot;basic plot builds without error&quot;, { skip_if_not_installed(&quot;sf&quot;) nc_tiny_coords &lt;- matrix( c(-81.473, -81.741, -81.67, -81.345, -81.266, -81.24, -81.473, 36.234, 36.392, 36.59, 36.573, 36.437, 36.365, 36.234), ncol = 2 ) nc &lt;- sf::st_as_sf( data_frame( NAME = &quot;ashe&quot;, geometry = sf::st_sfc(sf::st_polygon(list(nc_tiny_coords)), crs = 4326) ) ) expect_doppelganger(&quot;sf-polygons&quot;, ggplot(nc) + geom_sf() + coord_sf()) }) 10.2.3 Depends Use Depends, LinkingTo, and Enhances for more specialized dependencies. Do not use for packages, use Imports instead (Chapter 13 spoiler: Depends loads and attaches the package whereas Imports just loads it) Can be used to set a minimum version of R: R (&gt;= 4.0.0) If you state a minimum of R, you should have a reason and you should take reasonable measures to test your claim regularly An R version gotcha saveRDS() used version 2 for twenty years Version 3 became the default in 2019 with R 3.6.0 Older packages with version 2 .rds files were rebuilt with version 3 and require R version 3.5.0 or above Bundled and source package different! All packages listing the original package in Imports or even Suggests inherit new dependency The more dependencies, the more thought to minimum versions 10.2.4 LinkingTo Packages listed here rely on C or C++ code in another package 10.2.5 Enhances Provide methods for classes defined in another package Not recommended 10.2.6 Remotes Installs dependencies from outside of CRAN or Bioconductor Nonstandard dependencies are not allowed in CRAN submissions Written similar to Imports Remotes: hadley/testthat 10.2.7 Config/Needs/ Usually associated with continuous integration workflows (e.g., to build a website) New edition will cover this more fully Ignored by CRAN Specialized task dependencies vs true runtime dependencies 10.2.8 How to write fields Comma-separated One package per line Alphabetical Add with usethis::use_package(package, type = \"Imports\") &amp; usethis::use_package(package, type = \"Suggests\") Use usethis::use_tidy_description() to put fields in standard order and alphabetize dependencies Write minimum versions in parenthesis after package name dplyr (&gt;= 1.0.0). Make sure it is a minimum not an exact version. "],["title-and-description.html", "10.3 Title and description", " 10.3 Title and description What does your package do? 10.3.1 Title Title is a one line description of the package Plain text Capitalized title Does not end in a period Shows up on CRAN download page Do not include package name Put the names of R packages, software, and APIs inside single quotes Do not start with “A package for…” or “This package does…”. 10.3.2 Description Description can be up to a paragraph Each line up to 80 characters Indent subsequent lines with 4 spaces Put the names of R packages, software, and APIs inside single quotes You can use acronyms here Title: Create Elegant Data Visualisations Using the Grammar of Graphics Description: A system for &#39;declaratively&#39; creating graphics, based on &quot;The Grammar of Graphics&quot;. You provide the data, tell &#39;ggplot2&#39; how to map variables to aesthetics, what graphical primitives to use, and it takes care of the details. Shows up on CRAN like so: "],["author.html", "10.4 Author", " 10.4 Author Who are you? Contains executable R code utils::person() Fields are used to generate citation for package person(given = NULL, family = NULL, middle = NULL, email = NULL, role = NULL, comment = NULL, first = NULL, last = NULL) Authors@R: person(&quot;Hadley&quot;, &quot;Wickham&quot;, email = &quot;hadley@rstudio.com&quot;, role = c(&quot;aut&quot;, &quot;cre&quot;)) Name (given, family) Email address Role: cre: the current maintainer* aut: authors who have made significant contributions* ctb: contributors who have made smaller contributions cph: copyright holder if someone other than author fnd: funder Comment Can use this to add ORCID need at least one List multiple authors with c(): Authors@R: c( person(&quot;Hadley&quot;, &quot;Wickham&quot;, email = &quot;hadley@rstudio.com&quot;, role = &quot;cre&quot;), person(&quot;Winston&quot;, &quot;Chang&quot;, email = &quot;winston@rstudio.com&quot;, role = &quot;aut&quot;), person(&quot;RStudio&quot;, role = c(&quot;cph&quot;, &quot;fnd&quot;))) "],["license.html", "10.5 License", " 10.5 License If you want to share your package, include a license. You can use usethis::use_*_license() for configuration. More in Chapter 9! Notes from session Jon: Be sure to check the license of the source package. Fortunately that’s the next chapter! You want to make sure it’s a permissive license. Still give credit to where you found it in your source code, regardless of how permissive the license might be. For example, I use %||% from {rlang} in a bunch of packages, and, if I’m not importing anything else from {rlang}, I just copy/paste the (very simple) definition and note that I copy/pasted it from {rlang}. The thing Collin Berke showed is called re-exporting, and that’s different from copy/pasting code. It is completely ok to re-export functions; it still requires the user to have the other package, and it explicitly gives credit to the other package. See usethis::use_pipe() for an example of that. usethis::use_tidy_eval() is another one. Tan: re-exporting also avoids some of the permissive licensing issues! "],["version.html", "10.6 Version", " 10.6 Version Determines if dependencies are satisfied Two integers and separated by . or - (recommended to use .) Starts at 0.0.0.9000 Based on Semantic Versioning and by the X.Org versioning schemes Equivalent examples: numeric_version(&quot;1.9&quot;) == numeric_version(&quot;1.9.0&quot;) Can update version number by running usethis::use_version() or usethis::use_dev_version(). "],["other-fields.html", "10.7 Other fields", " 10.7 Other fields 10.7.1 URL and BugReports The URL field is commonly used to advertise the package’s website and to link to a public source repository BugReports is the URL where bug reports should be submitted usethis::use_github() will automatically create these for you; usethis::use_github_links() can add them for you. 10.7.2 Encoding Required if DESCRIPTION does not consist entirely of ASCII character Default is Encoding: UTF-8 10.7.3 Collate Controls the order in which files are sourced Most common if you’re using S4 (a system for object oriented programing) 10.7.4 LazyData If true, data is lazy loaded so users don’t have to run data() usethis::use_data() does this for you 10.7.5 Roxygen* create_package() creates fields related to the roxygen package "],["final-notes.html", "10.8 Final notes", " 10.8 Final notes Full list of what can be in the DESCRIPTION file is in the R extensions manual. You can also created your own but CRAN does have constraints Only English words Use Config/ prefix or Note suffix "],["meeting-videos-9.html", "10.9 Meeting Videos", " 10.9 Meeting Videos 10.9.1 Cohort 1 10.9.2 Cohort 2 10.9.3 Cohort 3 Meeting chat log 00:05:04 Isabella Velásquez: https://twitter.com/thomas_mock/status/1526977676661112832 00:29:23 Ryan Metcalf: I haven&#39;t found the directly answer for Maximum version of dependencies. However, the following thread is related (I&#39;m only skimming at the moment). Adding to Arun&#39;s question. https://community.rstudio.com/t/determining-which-version-of-r-to-depend-on/4396/11 00:51:43 Arun Chavan: MAJOR version when you make incompatible API changes, MINOR version when you add functionality in a backwards compatible manner, and PATCH version when you make backwards compatible bug fixes. 00:51:50 Arun Chavan: from https://semver.org/ "],["vignettes-long-form-documentation.html", "Chapter 11 Vignettes: long-form documentation", " Chapter 11 Vignettes: long-form documentation Learning objectives: THESE ARE NICE TO HAVE BUT NOT ABSOLUTELY NECESSARY "],["slide-1-2.html", "11.1 SLIDE 1", " 11.1 SLIDE 1 ADD SLIDES AS SECTIONS (##). TRY TO KEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF. "],["meeting-videos-10.html", "11.2 Meeting Videos", " 11.2 Meeting Videos 11.2.1 Cohort 1 11.2.2 Cohort 2 11.2.3 Cohort 3 Meeting chat log 00:05:44 Ryan Metcalf: https://www.rstudio.com/conference/ 00:08:38 Brendan Lam: https://stackoverflow.com/questions/70097126/how-to-edit-namespace-with-roxygen2-when-creating-r-packages 00:08:51 Brendan Lam: https://stackoverflow.com/questions/11990589/r-namespace-access-and-match-fun 00:44:59 Rex Parsons: https://github.com/gentrywhite/DSSP/blob/b3d7f0d10374968a43a634a1ae3f65e9231fceb0/R/plot.R#L43 00:48:01 Rex Parsons: https://stackoverflow.com/questions/5595512/what-is-the-difference-between-require-and-library 00:58:13 Rex Parsons: gotta run guys - thanks Brendan and team! 00:58:29 collinberke: https://stackoverflow.com/questions/64737686/why-library-or-require-should-not-be-used-in-a-r-package "],["licensing.html", "Chapter 12 Licensing", " Chapter 12 Licensing Learning objectives: Understand the differences between Permissive licenses and Copyleft licenses. Understand what to do when: licensing your own code licensing code received from other people (i.e., pull requests) licensing other people’s code you bundle into your own package Be able to describe how the copyright holder is determined Discuss the process involved when relicensing a package. "],["disclaimer.html", "12.1 Disclaimer", " 12.1 Disclaimer Information presented in this session is not legal advice. I am not a lawyer. Seek consultation from a legal professional. Focus for tonight: Inform each other on this topic in the context of R package development. Prepare ourselves to ask the right questions if we have concerns. Prepare us to do the right thing when using other people’s code. "],["software-licensing-a-complicated-field.html", "12.2 Software licensing, a complicated field", " 12.2 Software licensing, a complicated field Software licensing is a large and compicated field, made particularly complex because it lies at the intersection of programming and law. - Hadley Wickham Licensing for a package which might be distributed is an important but potentially complex subject. - Writing R Extensions Copyright is everywhere - Colin Fay in Licensing R Although complex, it’s important Not including a license could legally mean: Users can’t distribute your package or code. Users may not be able to technically use it. The level of permission given implies how your code can be used: Military or commercial context. Too restrictive, no one can use it. Protect yourself Interesting blog post regarding the NO WARRANTY clause and other statistical analysis tools. "],["major-license-categories.html", "12.3 Major license categories", " 12.3 Major license categories Permissive licenses very easy going. can be freely copied, modified, and published, and the only restriction is the license must be preserved. MIT &amp; Apache are most common modern permissive licenses. Copyleft licenses stricter. GNU GPL. allows you to freely copy and modify the code for personal use, but if you publish modified versions or bundle with other code, the modified version or complete bundle must also be licensed with the GPL. "],["what-license-should-you-choose.html", "12.4 What license should you choose?", " 12.4 What license should you choose? 12.4.1 Explore other R packages dplyr: MIT License lubridate: GPL purrr: MIT License survey: GPL-2 | GPL-3 R: GPL-2 R Studio: AGPL v3 shiny: GPL-3 12.4.2 By the numbers 2015 Survey of GitHub repos: All programming languages: ~55% use a permissive license ~20% use a copyleft The book’s analysis: ~70% of CRAN packages use copyleft ~15% use permissive license 12.4.3 Seek further guidance https://chooselicense.com Licensing R by Colin Fay Consult a legal professional "],["code-you-write.html", "12.5 Code you write", " 12.5 Code you write Purpose: Choose a license to make it clear how you want people to treat your code. Permissive license: minimal restrictions. MIT license with use_mit_license(). Copyleft license: all derivatives and bundles become open source. GPLv3 license with use_gpl_license(). Primarily contains data, not code, and with minimal restrictions. CC0 license with use_cc0_license() Example Code posted to the R4DS Online Learning Community Slack Require attribution when data is used. CC BY license with use_ccby_license() Examples (not package related) Julia Silge’s Blog Alison Hill’s Blog YiHui Xie’s Blog The R package’s book And many more… License code that will not be open sourced. use_proprietary_license() CRAN will not distribute these packages "],["copyright-holder.html", "12.6 Copyright holder", " 12.6 Copyright holder People who own the underlying copyright of the code. Choose the license (or later can change it). Multiple people/companies = may have copyright to individual contributions Who is the copyright holder? Code written on your own time: you’re the copyright holder. Code written on company time: your employer is the copyright holder. Code written under contract: you’re the copyright holder unless the contract describes otherwise. Discuss with a legal professional All organizations are different "],["key-files.html", "12.7 Key Files", " 12.7 Key Files Every license sets the License field in the DESCRIPTION. Standard form for name of the license: A name and version specification e.g. GPL (&gt;= 2), or Apache License (= 2.0). A standard abbreviation e.g. GPL-2, LGPL-2.1, Artistic-2.0. A name of a license “template” and a file containing specific variables. The most common case is MIT + file LICENSE, where the LICENSE file needs to contain two fields: the year and copyright holder. Pointer to the full text of a non-standard license, file LICENSE. The LICENSE file is used in one of two ways: Templates that require additional details to be complete in the LICENSE file. Contain the full text of non-standard and non-open source licenses. LICENSE.md includes a copy of the full text of the license. use .Rbuildignore to make sure this file is not sent to CRAN. "],["more-licenses-are-available.html", "12.8 More licenses are available", " 12.8 More licenses are available Although your choice may be flexible, it’s best to follow convention. Not all users will be familiar with licensing, let alone an uncommon license. Writing your own license can cause problems (JSON) Check out the book for a list of other license options. Need more: Check out https://opensource.org/licenses/alphabetical. "],["relicensing.html", "12.9 Relicensing", " 12.9 Relicensing Take time to do some pre-planning Find all non-trivial contributors (scan your git commit history) Check the Authors@R field in the DESCRIPTION to confirm that the package doesn’t contain bundled code This may limit your relicensing Get approvals from all the copyright holders/ contributors Examples: generics covr Interesting issue in ggplot2 "],["packages-mainly-containing-data.html", "12.10 Packages mainly containing data", " 12.10 Packages mainly containing data use_cc0_license(): CC0 license Data freely available nycflights13 Question about data focused packages sportsdataverse Packages with API methods for data sources tidycensus use_ccby_license(): CC-BY license. Require attribution when someone uses the data "],["code-given-to-you.html", "12.11 Code given to you", " 12.11 Code given to you Someone who contributes to your package using a pull request or similar Someone might find some code and choose to bundle it Contributor License Agreement (CLA) Copyright is the author’s unless stated otherwise in the CLA It’s important to acknowledge the contribution, and it’s good practice to be generous with thanks and attribution "],["code-you-bundle.html", "12.12 Code you bundle", " 12.12 Code you bundle When might this come up? Create a useful and attractive web page or HTML widgets by using someone else CSS or JS library Providing an R wrapper for a simple C or C++ library Copied a small amount of R code from another package to avoid taking a dependency First question: License compatibility? Before bundling, verify licenses are compatible When distributing, you can add additional restrictions but cannot remove restrictions Interesting discussion on use of Stack Overflow code Code is CC BY-SA license, which is only compatible with GPLv3 Picture from Wikipedia How to include Preserve all existing license and copyright statements, and make it as easy as possible for future readers to understand the licensing situation (another good reason to use git). Include some standard metadata in Authors@R. role = \"cph\" to declare that the author is a copyright holder, with a comment describing what they’re the author of. Different (but compatible) license with bundled code: include a LICENSE.note file that describes the overall license of the package, and the specific licenses of each individual component. "],["meeting-videos-11.html", "12.13 Meeting Videos", " 12.13 Meeting Videos 12.13.1 Cohort 1 12.13.2 Cohort 2 12.13.3 Cohort 3 12.13.3.1 Part 1 12.13.3.2 Part 2 Meeting chat log #### Part 1 00:05:51 Ryan Metcalf: Russ Hyde&#39;s new Cohort, &quot;JavaScript for R&quot;: https://book.javascript-for-r.com/ 00:10:18 Isabella Velásquez: Total Eclipse of the Heart ;D 00:10:32 Ryan Metcalf: OUTSTANDING!!!! 00:50:52 Ryan Metcalf: One of my favorite copyright battles was Google&#39;s development of the Dvorak language (for Android) which contained some levels of Java functions. When Oracle acquired Sun Microsystems in 2009, one of the first orders of business for Oracle was to go after Google for the a couple of code snippets supporting Android. 00:51:48 Ryan Metcalf: A good bit of reading, but great as a Legal use case of bridging open and closed source coding. https://www.supremecourt.gov/opinions/20pdf/18-956_d18f.pdf #### Part 2 00:01:58 Ryan Metcalf: Fix for BlueTooth: sudo kill bluetoothd 00:04:49 Brendan Lam: https://twitter.com/lucystats/status/959504698842652672 00:04:57 Brendan Lam: How to pronounce it (supposedly) 00:05:22 Ryan Metcalf: Awesome Brendan! great thread! 00:17:32 Ryan Metcalf: https://creativecommons.org/Government 00:18:59 Ryan Metcalf: Directly related to the US: https://resources.data.gov/open-licenses/ 00:24:16 Ryan Metcalf: Quick side note: I received a block due to API key. You can acquire one at: http://api.census.gov/data/key_signup.html 00:41:21 Ryan Metcalf: The Google Verse turned up this link for R as a package is GPL-2 | GPL-3. https://www.r-project.org/Licenses/#:~:text=R%20as%20a%20package%20is,to%20see%20if%20this%20applies. 00:44:14 Isabella Velásquez: ??pivot_longer every day 00:49:28 Rex Parsons: I think you&#39;re right 01:06:38 Isabella Velásquez: I learned of this add in that helps with roxygen2 tags: https://github.com/matt-dray/snorkel 01:11:24 Ryan Metcalf: S3 Reference: https://adv-r.hadley.nz/s3.html?q=S3#implicit-class "],["testing-basics.html", "Chapter 13 Testing basics", " Chapter 13 Testing basics Learning objectives: THESE ARE NICE TO HAVE BUT NOT ABSOLUTELY NECESSARY "],["slide-1-3.html", "13.1 SLIDE 1", " 13.1 SLIDE 1 ADD SLIDES AS SECTIONS (##). TRY TO KEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF. "],["meeting-videos-12.html", "13.2 Meeting Videos", " 13.2 Meeting Videos 13.2.1 Cohort 1 13.2.2 Cohort 2 13.2.3 Cohort 3 "],["designing-your-test-suite.html", "Chapter 14 Designing your test suite", " Chapter 14 Designing your test suite Learning objectives: THESE ARE NICE TO HAVE BUT NOT ABSOLUTELY NECESSARY "],["slide-1-4.html", "14.1 SLIDE 1", " 14.1 SLIDE 1 ADD SLIDES AS SECTIONS (##). TRY TO KEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF. "],["meeting-videos-13.html", "14.2 Meeting Videos", " 14.2 Meeting Videos 14.2.1 Cohort 1 14.2.2 Cohort 2 14.2.3 Cohort 3 Meeting chat log 00:13:29 Ryan Metcalf: Additional resources related to `test_that`. The link is related to Shiny Apps, but related to packaging Production Grade Shiny Apps. https://engineering-shiny.org/build-yourself-safety-net.html?q=test_that#testing-the-business-logic 01:14:17 Ryan Metcalf: https://about.gitlab.com/topics/ci-cd/ 01:17:26 Arun Chavan: I have to run too. Thanks for a great session -- see you both next week! "],["advanced-testing-techniques.html", "Chapter 15 Advanced testing techniques", " Chapter 15 Advanced testing techniques Learning objectives: THESE ARE NICE TO HAVE BUT NOT ABSOLUTELY NECESSARY "],["slide-1-5.html", "15.1 SLIDE 1", " 15.1 SLIDE 1 ADD SLIDES AS SECTIONS (##). TRY TO KEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF. "],["meeting-videos-14.html", "15.2 Meeting Videos", " 15.2 Meeting Videos 15.2.1 Cohort 3 Meeting chat log 01:00:06 Ryan Metcalf: I believe the comment Collin was mentioning for testing Shiny was ShinyDriver() 01:06:26 Collin Berke: Jim Hester&#39;s talk: https://www.jimhester.com/talk/2020-rsc-github-actions/ 01:08:22 Rex Parsons: https://usethis.r-lib.org/reference/github_actions.html#use-github-action-check-standard- 01:08:29 Ryan Metcalf: Collin has a different website: This was what I found: https://r-hub.github.io/rhub/ "],["function-documentation.html", "Chapter 16 Function documentation", " Chapter 16 Function documentation Learning objectives: Describe the benefits of well developed object documentation Discuss the definition of object documentation Identify the key components of object documentation for different R objects Functions Packages Generics, classes, and methods Demonstrate the object documentation workflow Discuss some general formatting and style guidelines "],["why-care-about-object-documentation.html", "16.1 Why care about object documentation?", " 16.1 Why care about object documentation? Documentation is an important component of packages How will users know how to use your package? Inform your future self Inform other contributors "],["object-documentation-defined.html", "16.2 Object documentation defined", " 16.2 Object documentation defined Focus for tonight is on object documentation What do you think when you hear the word object? Accessed via ? or help() Object documentation: reference documentation. Purpose is to serve as a reference (e.g., a dictionary entry) Great use case for standardized naming conventions (e.g., stringr package) Difference between object documentation and vignettes Object documentation = A short-form reference guide Vignettes = A long-form document on how to use package objects to solve a problem "],["object-documentation-an-overview.html", "16.3 Object documentation, an overview", " 16.3 Object documentation, an overview Documentation files are rendered from a syntax loosely based on LaTex. HTML Plain text PDF More on this syntax can be found in the R extensions manual roxygen2 provides a more user-friendly syntax to create documentation Comments using @tags &gt;&gt; man/.Rd files &gt;&gt; HTML or PDFs Code is intermingled with documentation Handles some boilerplate set up Abstracts away the differences for documenting different objects Manages the NAMESPACE (Chapter 13) "],["the-documentation-workflow.html", "16.4 The documentation workflow", " 16.4 The documentation workflow Two workflows Fast, but links don’t work Slow, but the links work You may need to adjust some settings if build and reload doesn’t work "],["rendering-behind-the-scenes.html", "16.5 Rendering, behind the scenes", " 16.5 Rendering, behind the scenes "],["the-nuts-and-bolts-of-roxygen-comments.html", "16.6 The nuts and bolts of roxygen comments", " 16.6 The nuts and bolts of roxygen comments Four basic building blocks: #' - roxygen comment Multiple # lines - a block Wrapped at 80 characters (Ctrl/Cmd + Shift + / or reflow comment) Tags - Breaks up the blocks @tagName details Introduction First sentence is the title Second paragraph is the description (what does the function do?) Paragraphs &gt;= 3 allow for more detail All objects must have a title and description Details are optional Blocks and tags give documentation structure "],["documenting-functions-1.html", "16.7 Documenting functions", " 16.7 Documenting functions Most commonly documented object Three common tags: @param name description: describes the function’s inputs or parameters. These need to be documented Multiple arguments can be documented in one place @param x,y description @examples Provides executable code on how to use the function in practice Must run without errors or use \\dontrun{} Keep in mind: Most users will look at examples first @return Describes the output from the function. Addional tags @section @seealso @family @alias @keyword Checkout the Rd (documentation) tags vignette Keep style conventions top of mind Check out the book for more details ggplot2 example "],["documenting-datasets.html", "16.8 Documenting datasets", " 16.8 Documenting datasets A different process, see Chapter 14. "],["documenting-packages.html", "16.9 Documenting packages", " 16.9 Documenting packages Provide a help page for your package as a whole package?foo Intended to describe the most important components of the package Great place to put package level import statements ggplot2 example "],["documenting-classes-generics-and-methods.html", "16.10 Documenting classes, generics, and methods", " 16.10 Documenting classes, generics, and methods S3 generics Are regular functions, so document them as such. dplyr::glimpse() example S4 classes and methods Use @slot to document the slots of the class. Aim to keep all your documentation together Use @rdname or @describeIn to keep docs together Control ordering of code loading by using @include RC (reference classes) Uses the docstring in the method for the documentation Is included within the ‘Methods’ section You now only need one roxygen block per class Uses the @field See the account example inregexcite "],["a-note-about-special-characters.html", "16.11 A note about special characters", " 16.11 A note about special characters @ denotes a tag, so use @@ for a literal @ % denotes start of a LaTex comment, so escape for a literal % \\% Escape your backslashes (e.g., \\\\) "],["do-repeat-yourself.html", "16.12 Do repeat yourself", " 16.12 Do repeat yourself Self-contained documentation vs. DRY (don’t repeat yourself) Limit user frustration resulting from navigating multiple help files Two ways to handle: @inheritParams: reuse parameter documentation From source @inheritParams function From another package @inheritParams package::function #&#39; @param a This is the first argument. foo &lt;- function(a) a + 10 #&#39; @param b This is the second argument. #&#39; @inheritParams foo bar &lt;- function(a, b) { foo(a) * 10 } # Equivalent to #&#39; @param a This is the first argument. #&#39; @param b This is the second argument. bar &lt;- function(a, b) { foo(a) * 10 } @describeIn or @rdname: document multiple functions in one place Use with caution. Can lead to confusing documentation. See the foobar example See the arithmetic example "],["text-formatting.html", "16.13 Text formatting", " 16.13 Text formatting Check out the reference sheet in the book Use as a reference Generally follows a LaTex like syntax \\formatLikeThis{yourText} Formatting that can be applied: Character formatting Linking to other docs or materials Lists Mathematical notation Tables "],["meeting-videos-15.html", "16.14 Meeting Videos", " 16.14 Meeting Videos 16.14.1 Cohort 1 16.14.2 Cohort 2 16.14.3 Cohort 3 16.14.3.1 Part 1 16.14.3.2 Part 2 Meeting chat log #### Part 1 00:01:58 Ryan Metcalf: Fix for BlueTooth: sudo kill bluetoothd 00:04:49 Brendan Lam: https://twitter.com/lucystats/status/959504698842652672 00:04:57 Brendan Lam: How to pronounce it (supposedly) 00:05:22 Ryan Metcalf: Awesome Brendan! great thread! 00:17:32 Ryan Metcalf: https://creativecommons.org/Government 00:18:59 Ryan Metcalf: Directly related to the US: https://resources.data.gov/open-licenses/ 00:24:16 Ryan Metcalf: Quick side note: I received a block due to API key. You can acquire one at: http://api.census.gov/data/key_signup.html 00:41:21 Ryan Metcalf: The Google Verse turned up this link for R as a package is GPL-2 | GPL-3. https://www.r-project.org/Licenses/#:~:text=R%20as%20a%20package%20is,to%20see%20if%20this%20applies. 00:44:14 Isabella Velásquez: ??pivot_longer every day 00:49:28 Rex Parsons: I think you&#39;re right 01:06:38 Isabella Velásquez: I learned of this add in that helps with roxygen2 tags: https://github.com/matt-dray/snorkel 01:11:24 Ryan Metcalf: S3 Reference: https://adv-r.hadley.nz/s3.html?q=S3#implicit-class "],["vignettes.html", "Chapter 17 Vignettes", " Chapter 17 Vignettes Learning objectives: THESE ARE NICE TO HAVE BUT NOT ABSOLUTELY NECESSARY "],["slide-1-6.html", "17.1 SLIDE 1", " 17.1 SLIDE 1 ADD SLIDES AS SECTIONS (##). TRY TO KEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF. "],["meeting-videos-16.html", "17.2 Meeting Videos", " 17.2 Meeting Videos 17.2.1 Cohort 1 17.2.2 Cohort 2 17.2.3 Cohort 3 Meeting chat log PART 1: 00:37:30 Rex Parsons: https://github.com/gentrywhite/DSSP/blob/master/R/predict.R 00:38:55 Ryan Metcalf: [Data frames and tibles](https://adv-r.hadley.nz/vectors-chap.html#tibble) 00:39:57 Rex Parsons: https://github.com/SurajGupta/r-source/blob/master/src/library/stats/R/predict.R 01:22:52 Rex Parsons: https://www.youtube.com/watch?v=PGOTeN-ItXo&amp;list=PLOkVupluCIjvfzQFgjiSQIccKiC-BJXwi 01:28:11 Rex Parsons: https://stackoverflow.com/a/11562457/11738294 PART 2: 01:19:19 Ryan Metcalf: https://bookdown.org/yihui/rmarkdown-cookbook/ 01:21:06 Ryan Metcalf: https://bookdown.org/ 01:24:14 Brendan Lam: Sort of related, are there any packages to create cheatsheets (e.g., https://www.rstudio.com/resources/cheatsheets/ )? 01:25:05 Rex Parsons: https://github.com/brentthorne/posterdown 01:25:37 Brendan Lam: Thanks!^ "],["other-markdown-files.html", "Chapter 18 Other markdown files", " Chapter 18 Other markdown files Learning objectives: THESE ARE NICE TO HAVE BUT NOT ABSOLUTELY NECESSARY "],["slide-1-7.html", "18.1 SLIDE 1", " 18.1 SLIDE 1 ADD SLIDES AS SECTIONS (##). TRY TO KEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF. "],["meeting-videos-17.html", "18.2 Meeting Videos", " 18.2 Meeting Videos 18.2.1 Cohort 3 Meeting chat log 00:37:08 Rex Parsons: https://fromthebottomoftheheap.net/2020/04/30/rendering-your-readme-with-github-actions/ 00:59:25 Ryan Metcalf: Was it `cast1? "],["website.html", "Chapter 19 Website", " Chapter 19 Website Learning objectives: THESE ARE NICE TO HAVE BUT NOT ABSOLUTELY NECESSARY "],["slide-1-8.html", "19.1 SLIDE 1", " 19.1 SLIDE 1 ADD SLIDES AS SECTIONS (##). TRY TO KEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF. "],["meeting-videos-18.html", "19.2 Meeting Videos", " 19.2 Meeting Videos 19.2.1 Cohort 1 19.2.2 Cohort 2 19.2.3 Cohort 3 Meeting chat log 00:29:06 Ryan Metcalf: https://blog.jdriven.com/2020/10/automating-hosting-revealjs-slides-on-gitlab/ 00:53:57 Arun Chavan: https://rstudio.github.io/distill/website.html 00:55:46 Brendan Lam: Cool! I didn’t even remember what&#39;s on my repo 01:05:13 Brendan Lam: As someone who didn&#39;t know what Docker is, this was very informative. thanks, Ryan! "],["r-cmd-check.html", "Chapter 20 R CMD CHECK ", " Chapter 20 R CMD CHECK "],["r-cmd-check-1.html", "20.1 R CMD CHECK", " 20.1 R CMD CHECK R CMD CHECK is the terminal command devtools::check() and running Ctrl/Cmd + Shift + E run it indirectly. devtools::check() also does: updates documentation (devtools::document()) bundles before checking (bit safer as it removes unnecessary files) sets the NOT_CRAN environment variable to TRUE. 20.1.1 Results ERRORs: Severe problems that you should fix regardless of whether or not you’re submitting to CRAN. WARNINGs: Likely problems that you must fix if you’re planning to submit to CRAN (and a good idea to look into even if you’re not). NOTEs: Mild problems. If you are submitting to CRAN, you should strive to eliminate all NOTEs, even if they are false positives. If you have no NOTEs, human intervention is not required, and the package submission process will be easier. If it’s not possible to eliminate a NOTE, you’ll need describe why it’s OK in your submission comments, as described in Section 22.2. If you’re not submitting to CRAN, carefully read each NOTE, but don’t go out of your way to fix things that you don’t think are problems. pkgs with compiled code may have larger than “allowed” file size. This appears as a NOTE as is no big problem - you can just mention this in the cran-comments.md in the submission. "],["checks.html", "20.2 Checks", " 20.2 Checks 50 checks - for a full list, see the book. The categories of checks are: metadata package structure files are where they should be and there aren’t any non-standard top level files it can be installed package size isn’t &gt; 5MB in short: lots of pain that can be alleviated by using {usethis} for making any new files DESCRIPTION License: ____ must refer to a known license (https://svn.r-project.org/R/trunk/share/licenses/license.db) or must be a file LICENSE and the file must exist All dependencies including Suggests must be installed Every package listed in Depends must also be imported in the NAMESPACE or accessed with pkg::foo. If you don’t do this, your package will work when attached to the search path (with library(mypackage)) because it will also be attaching those packages that it depends on but will not work when only loaded (e.g. mypackage::foo()). In terms of good practice: don’t use Depends and always access other packages that your package depends on using pkg::foo. NAMESPACE R code checks R scripts for errors - unlikely to get many issues here since they would have cropped up when running devtools::load_all() (which you probably would have before running a check) can’t access functions from other packages which aren’t exported (:::) you are not allowed to use ::: to access non-exported functions from other packages. Either ask the package maintainer to export the function you need, or write your own version of it using exported functions. Alternatively, if the licenses are compatible you can copy and paste the exported function into your own package. If you do this, remember to update Authors@R. S3 generic/method consistency print &lt;- function(x, ...){ UseMethod(&quot;print&quot;) } # BAD print.my_class &lt;- function(x) { cat(&quot;Hi&quot;) } # GOOD print.my_class &lt;- function(x, ...) { cat(&quot;Hi&quot;) } # Also ok print.my_class &lt;- function(x, ..., my_arg = TRUE) { cat(&quot;Hi&quot;) } Don’t use assign() to modify objects in the global environment. If you need to maintain state across function calls, create your own environment with e &lt;- new.env(parent = emptyenv()) and set and get values in it: e &lt;- new.env(parent = emptyenv()) add_up &lt;- function(x) { if (is.null(e$last_x)) { old &lt;- 0 } else { old &lt;- e$last_x } new &lt;- old + x e$last_x &lt;- new new } add_up(10) #&gt; [1] 10 add_up(20) #&gt; [1] 30 Don’t use T or F in your functions - use TRUE and FALSE Data Documentation checks for completeness in all documentation and all man/*.Rd files have correct syntax checks maximum linewidth checks examples in help files (can use devtools::run_examples() to check these alone) Demos Compiled Code checks all foreign function calls with in compiled code runs all tests (devtools::test()) if the devtools::test() passes but test within the R CMD CHECK fails, there’s something that’s changed in your testing environment and it can be tricky to figure out. I’ve found restarting R before running devtools::test() seems to make the problem apparent. Vignettes checks for dependencies in vignettes and that the files are in right place within the pkg directory builds the vignettes running vignettes requires that the package is installed (devtools::install()) can be pretty slow - if you’re wanting to quicky iterate through check()s and focus on other problems in your package: add --no-build-vignettes to “Build Source Packages” field in project options devtools::check(vignettes=FALSE) "],["meeting-videos-19.html", "20.3 Meeting Videos", " 20.3 Meeting Videos 20.3.1 Cohort 3 Meeting chat log 00:48:13 Brendan Lam: I don&#39;t know what CRAN reviews, but ROpenSci is pretty transparent about how they do software review: https://devguide.ropensci.org/ 01:00:06 Arun Chavan: omg 01:03:13 Brendan Lam: Thanks Collin! You&#39;ve done an exceptionally good job leading this cohort. 01:05:48 Arun Chavan: https://rfordatascience.slack.com/archives/C0183F9UC2V/p1659977487900379 01:06:22 collinberke: https://rfordatascience.slack.com/archives/C0183F9UC2V/p1659977487900379 01:08:19 collinberke: https://avehtari.github.io/ROS-Examples/ 01:11:12 Brendan Lam: Same "],["continuous-integration.html", "Chapter 21 Continuous integration", " Chapter 21 Continuous integration Learning objectives: THESE ARE NICE TO HAVE BUT NOT ABSOLUTELY NECESSARY "],["slide-1-9.html", "21.1 SLIDE 1", " 21.1 SLIDE 1 ADD SLIDES AS SECTIONS (##). TRY TO KEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF. "],["meeting-videos-20.html", "21.2 Meeting Videos", " 21.2 Meeting Videos 21.2.1 Cohort 1 21.2.2 Cohort 2 21.2.3 Cohort 3 Meeting chat log 00:29:06 Ryan Metcalf: https://blog.jdriven.com/2020/10/automating-hosting-revealjs-slides-on-gitlab/ 00:53:57 Arun Chavan: https://rstudio.github.io/distill/website.html 00:55:46 Brendan Lam: Cool! I didn’t even remember what&#39;s on my repo 01:05:13 Brendan Lam: As someone who didn&#39;t know what Docker is, this was very informative. thanks, Ryan! "],["releasing-to-cran.html", "Chapter 22 Releasing to CRAN", " Chapter 22 Releasing to CRAN How to prepare and release a package to CRAN "],["preparing-for-submission.html", "22.1 preparing for submission", " 22.1 preparing for submission To get your package ready to release, follow these steps: Pick a version number. (advanced from the existing development version with .9000 suffix) Run and document R CMD check. Check that you’re aligned with CRAN policies. Update README.md and NEWS.md. Submit the package to CRAN. Prepare for the next version by updating version numbers. Publicise the new version. "],["submission-process-test-environments.html", "22.2 submission process &amp; test environments", " 22.2 submission process &amp; test environments Don’t do it manually - just use devtools::release() Include a cran-comments.md file (usethis::use_cran_comments()) to describe the results from an R CMD CHECK and the systems that it was run on (those on your system, rhub or GitHub actions) CRAN runs on Windows, Mac OS X, Linux and Solaris. You don’t need to test on all but you need to test on some and mention in the comments which you used. devtools::release() suggests that you test using rhub - I’m not sure what the difference is between this and the checks done by GitHub actions (if there is any) If you have an OS-specific problem: use a virtualisation tool so that you can debug locally &gt; send repeatedly to GitHub with actions to test on problematic system &gt; send to CRAN and hope for the best "],["check-results.html", "22.3 check results", " 22.3 check results No ERRORs or WARNINGs avoid as many NOTEs as possible - if they can’t be avoided, be open about it in the cran-comments.md There will always be a NOTE for the first release of a package to CRAN, so it’s worth mentioning this in the cran-comments.md if you’re releasing your package for the first time as well. "],["reverse-dependencies.html", "22.4 reverse dependencies", " 22.4 reverse dependencies it’s your responsibility to ensure that downstream packages are not broken by your update use {revdepcheck} rather than the superseded devtools::revdep_check() usethis::use_revdep() calls revdepcheck functions and sets things up nicely to incorporate github actions and an email notification - not sure what the current state is though since revdepcheck isn’t on CRAN if you do cause breaking changes, then mention in the cran-comments.md that you have notified downstream package maintainers about the upcoming changes. "],["cran-policies.html", "22.5 CRAN policies", " 22.5 CRAN policies stable email address copyright in DESCRIPTION file make all reasonable efforts to get package working across platforms do not make external changes without explicit user permission: global environment writing to file system installing packages quiting R sending info over internet opening other programs don’t submit updates too frequently: every 1-2 months at most "],["other-pre-submission-checks.html", "22.6 other pre-submission checks", " 22.6 other pre-submission checks goodpractice::gp() "],["release-using-devtoolsrelease.html", "22.7 release using devtools::release()", " 22.7 release using devtools::release() builds package and runs R CMD CHECK one last time prompts the user to do final checks including spelling, checking on rhub, committing all changes etc uploads the package bundle to CRAN and includes cran-comments.md Afterwards, you’ll get a confirmation email from CRAN (to the maintainers email). Once approved, the CRAN maintainer will run the checks and get back to you. "],["post-release.html", "22.8 post-release", " 22.8 post-release If you get rejected: no need to respond to the email fix problems identified and include a ## Resubmission section at the top of cran-comments.md showing that it is a resubmission and listing the changes that you made since the previous, rejected submission. If you get accepted: success! when you did the submission, a CRAN-SUBMISSION or CRAN-RELEASE file was created. You don’t need to commit this to GitHub. I usually just wait until it’s accepted (hopefully) and when it is, run: usethis::use_github_release(). This creates a draft release on GitHub which you can then submit online. add the .9000 suffix to the version on GitHub to indicate that it’s the development version "],["publicising-it.html", "22.9 publicising it", " 22.9 publicising it tweet about it with #rstats post about it on a blog send it to the r-packages mailing list "],["meeting-videos-21.html", "22.10 Meeting Videos", " 22.10 Meeting Videos 22.10.1 Cohort 1 22.10.2 Cohort 2 22.10.3 Cohort 3 Meeting chat log 00:48:13 Brendan Lam: I don&#39;t know what CRAN reviews, but ROpenSci is pretty transparent about how they do software review: https://devguide.ropensci.org/ 01:00:06 Arun Chavan: omg 01:03:13 Brendan Lam: Thanks Collin! You&#39;ve done an exceptionally good job leading this cohort. 01:05:48 Arun Chavan: https://rfordatascience.slack.com/archives/C0183F9UC2V/p1659977487900379 01:06:22 collinberke: https://rfordatascience.slack.com/archives/C0183F9UC2V/p1659977487900379 01:08:19 collinberke: https://avehtari.github.io/ROS-Examples/ 01:11:12 Brendan Lam: Same "],["lifecycle.html", "Chapter 23 Lifecycle", " Chapter 23 Lifecycle Learning objectives: THESE ARE NICE TO HAVE BUT NOT ABSOLUTELY NECESSARY "],["slide-1-10.html", "23.1 SLIDE 1", " 23.1 SLIDE 1 ADD SLIDES AS SECTIONS (##). TRY TO KEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF. "],["meeting-videos-22.html", "23.2 Meeting Videos", " 23.2 Meeting Videos 23.2.1 Cohort 1 23.2.2 Cohort 2 23.2.3 Cohort 3 Meeting chat log 00:37:08 Rex Parsons: https://fromthebottomoftheheap.net/2020/04/30/rendering-your-readme-with-github-actions/ 00:59:25 Ryan Metcalf: Was it `cast1? 23.2.4 Cohort 3 Extra: Jenny Bryan Meeting chat log 00:02:39 Jon Harmon (jonthegeek): Questions: (link no longer available) 00:03:58 Ryan Metcalf: I sent the link to Shel and Lucy too. 00:30:18 collinberke: +1 for gargle 00:42:26 Rebecca Butler: this was such a great question (and answer). thank you! 00:45:05 Ryan Metcalf: https://github.com/search 00:50:32 Jon Harmon (jonthegeek): https://r-universe.dev/search/ 01:01:40 Jon Harmon (jonthegeek): Vote up questions to help me choose the last one or two! Questions: (link no longer available) 01:03:29 Jon Harmon (jonthegeek): https://design.tidyverse.org/ 01:04:10 Jon Harmon (jonthegeek): https://style.tidyverse.org/error-messages.html 01:09:54 Jon Harmon (jonthegeek): use_tidy_github_actions 01:10:34 Jon Harmon (jonthegeek): use_tidy_upkeep_issue 01:13:42 Rebecca Butler: Thank you so, so much!! 01:17:17 collinberke: Thank you! 01:17:17 Brendan Lam: Thank you! "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
